{
  "active": false,
  "connections": {
    "When clicking ‘Execute workflow’": {
      "main": [
        [
          {
            "node": "Get Test Project Tasks",
            "type": "main",
            "index": 0
          },
          {
            "node": "Get template tasks",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get Test Project Tasks": {
      "main": [
        [
          {
            "node": "Merge Tasks",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get template tasks": {
      "main": [
        [
          {
            "node": "Merge Tasks",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "Merge Tasks": {
      "main": [
        [
          {
            "node": "Build Expansion Actions",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Build Expansion Actions": {
      "main": [
        [
          {
            "node": "Process Actions one by one",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Process Actions one by one": {
      "main": [
        [
          {
            "node": "Route Action",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Route Action": {
      "main": [
        [
          {
            "node": "Update Task",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Delete Task",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Create Task",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "createdAt": "2025-10-09T14:54:54.645Z",
  "id": "XW5CGfsbHZrvUD0u",
  "isArchived": true,
  "meta": null,
  "name": "☑️ Todoist Template Expander (JULES)",
  "nodes": [
    {
      "parameters": {},
      "type": "n8n-nodes-base.manualTrigger",
      "typeVersion": 1,
      "position": [
        -80,
        176
      ],
      "id": "93c3cf62-1f0d-41bf-973e-7366ca5e6d1b",
      "name": "When clicking ‘Execute workflow’"
    },
    {
      "parameters": {
        "operation": "getAll",
        "returnAll": true,
        "filters": {
          "projectId": "2233792081"
        }
      },
      "type": "n8n-nodes-base.todoist",
      "typeVersion": 2.1,
      "position": [
        224,
        96
      ],
      "id": "e5d6066c-eb56-409f-86fe-c1c3ca01cee1",
      "name": "Get Test Project Tasks",
      "credentials": {
        "todoistApi": {
          "id": "7jDBSQS5HIVX5LSR",
          "name": "Todoist account (API Key)"
        }
      }
    },
    {
      "parameters": {
        "operation": "getAll",
        "returnAll": true,
        "filters": {
          "projectId": "2360682540"
        }
      },
      "type": "n8n-nodes-base.todoist",
      "typeVersion": 2.1,
      "position": [
        224,
        288
      ],
      "id": "85265f6c-139a-4a6a-bf75-c59b7c64f611",
      "name": "Get template tasks",
      "credentials": {
        "todoistApi": {
          "id": "7jDBSQS5HIVX5LSR",
          "name": "Todoist account (API Key)"
        }
      }
    },
    {
      "parameters": {},
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3,
      "position": [
        448,
        192
      ],
      "name": "Merge Tasks",
      "id": "02d491c6-2505-41dd-9e32-ffaa32f4763c"
    },
    {
      "parameters": {
        "language": "python",
        "pythonCode": "from collections import defaultdict\n\ndef normalize_name(value):\n    if not value:\n        return ''\n    # Strips leading emojis and spaces\n    first_alnum_index = -1\n    for i, char in enumerate(value):\n        if char.isalnum():\n            first_alnum_index = i\n            break\n    if first_alnum_index == -1:\n        return ''\n    value = value[first_alnum_index:]\n    # Remove all non-alphanumeric characters\n    return ''.join(ch for ch in value.lower() if ch.isalnum())\n\n# All tasks from the test project, from input 0\ntest_project_tasks = [i.json for i in _input.all(0)]\n# All tasks from the templates project, from input 1\ntemplate_project_tasks = [i.json for i in _input.all(1)]\n\n# Build a map of parent_id -> list of child tasks for both projects\ntest_subtasks = defaultdict(list)\nfor task in test_project_tasks:\n    if task.get('parent_id'):\n        test_subtasks[task['parent_id']].append(task)\n\ntemplate_subtasks = defaultdict(list)\nfor task in template_project_tasks:\n    if task.get('parent_id'):\n        template_subtasks[task['parent_id']].append(task)\n\n# Create a lookup for top-level templates by their normalized name\ntemplate_lookup = {\n    normalize_name(t.get('content', '')): t\n    for t in template_project_tasks if not t.get('parent_id')\n}\n\nactions = []\n\n# Find tasks in the test project that need to be expanded\nfor task_to_expand in test_project_tasks:\n    if 'templated' in task_to_expand.get('labels', []):\n        normalized_content = normalize_name(task_to_expand.get('content', ''))\n        template = template_lookup.get(normalized_content)\n\n        if not template:\n            continue\n\n        # 1. Generate UPDATE action for the main task\n        original_labels = task_to_expand.get('labels', [])\n        template_labels = template.get('labels', [])\n        combined_labels = list(set(original_labels + template_labels))\n        final_labels = [label for label in combined_labels if label != 'templated']\n\n        update_payload = {\n            'task_id': task_to_expand['id'],\n            'content': template.get('content'),\n            'description': template.get('description'),\n            'priority': template.get('priority'),\n            'due': template.get('due'),\n            'labels': final_labels\n        }\n        actions.append({'json': {'action': 'update_task', 'payload': update_payload}})\n\n        # 2. Generate DELETE actions for existing subtasks\n        existing_subtask_list = test_subtasks.get(task_to_expand['id'], [])\n        for subtask in existing_subtask_list:\n            delete_payload = {'task_id': subtask['id']}\n            actions.append({'json': {'action': 'delete_task', 'payload': delete_payload}})\n\n        # 3. Generate CREATE actions for new subtasks from the template\n        new_subtask_list = template_subtasks.get(template['id'], [])\n        for subtask_template in new_subtask_list:\n            create_payload = {\n                'content': subtask_template.get('content'),\n                'description': subtask_template.get('description'),\n                'priority': subtask_template.get('priority'),\n                'due': subtask_template.get('due'),\n                'labels': subtask_template.get('labels', []),\n                'parent_id': task_to_expand['id'],\n                'project_id': task_to_expand.get('project_id')\n            }\n            actions.append({'json': {'action': 'create_task', 'payload': create_payload}})\n\nreturn actions"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        672,
        192
      ],
      "name": "Build Expansion Actions",
      "id": "b48fc681-6f09-4d8a-b919-d576c505f9c9"
    },
    {
      "parameters": {
        "batchSize": 1,
        "options": {}
      },
      "type": "n8n-nodes-base.splitInBatches",
      "typeVersion": 2,
      "position": [
        896,
        192
      ],
      "name": "Process Actions one by one",
      "id": "fb4881a1-eecf-4942-885c-5934ac41a2d1"
    },
    {
      "parameters": {
        "dataType": "string",
        "value1": "={{$json.action}}",
        "rules": {
          "rules": [
            {
              "value2": "update_task"
            },
            {
              "value2": "delete_task"
            },
            {
              "value2": "create_task"
            }
          ]
        }
      },
      "type": "n8n-nodes-base.switch",
      "typeVersion": 2,
      "position": [
        1120,
        176
      ],
      "name": "Route Action",
      "id": "ea9e7f5c-23de-4922-a4f0-afc7f6c8f1b4"
    },
    {
      "parameters": {
        "project": {
          "__rl": true,
          "value": "2233792081",
          "mode": "list",
          "cachedResultName": "🧪 Test (meta)"
        },
        "content": "={{$json.payload.content }}",
        "options": {
          "description": "={{$json.payload.description}}",
          "priority": "={{$json.payload.priority}}"
        }
      },
      "type": "n8n-nodes-base.todoist",
      "typeVersion": 2.1,
      "position": [
        1344,
        0
      ],
      "name": "Update Task",
      "id": "df373bf9-596d-4120-9028-2b409ef4bf6b",
      "credentials": {
        "todoistApi": {
          "id": "7jDBSQS5HIVX5LSR",
          "name": "Todoist account (API Key)"
        }
      }
    },
    {
      "parameters": {
        "operation": "delete",
        "taskId": "={{$json.payload.task_id}}"
      },
      "type": "n8n-nodes-base.todoist",
      "typeVersion": 2.1,
      "position": [
        1344,
        192
      ],
      "name": "Delete Task",
      "id": "a09a8baa-7bda-4b6d-b0cf-2f19ca8c0dda",
      "credentials": {
        "todoistApi": {
          "id": "7jDBSQS5HIVX5LSR",
          "name": "Todoist account (API Key)"
        }
      }
    },
    {
      "parameters": {
        "project": {
          "__rl": true,
          "value": "2233792081",
          "mode": "list",
          "cachedResultName": "🧪 Test (meta)"
        },
        "content": "={{$json.payload.content}}",
        "options": {
          "description": "={{$json.payload.description}}",
          "parentId": "={{$json.payload.parent_id}}",
          "priority": "={{$json.payload.priority}}"
        }
      },
      "type": "n8n-nodes-base.todoist",
      "typeVersion": 2.1,
      "position": [
        1344,
        384
      ],
      "name": "Create Task",
      "id": "4bb16186-fccc-453c-906d-0478375a16ec",
      "credentials": {
        "todoistApi": {
          "id": "7jDBSQS5HIVX5LSR",
          "name": "Todoist account (API Key)"
        }
      }
    }
  ],
  "pinData": {},
  "repo_name": "n8n-workflows",
  "repo_owner": "pschmitt",
  "repo_path": "workflows",
  "settings": {
    "executionOrder": "v1"
  },
  "shared": [
    {
      "updatedAt": "2025-10-09T14:54:54.648Z",
      "createdAt": "2025-10-09T14:54:54.648Z",
      "role": "workflow:owner",
      "workflowId": "XW5CGfsbHZrvUD0u",
      "projectId": "DeJsGrmui3Dbhpxg"
    }
  ],
  "staticData": null,
  "tags": [],
  "triggerCount": 0,
  "updatedAt": "2025-10-09T15:01:48.000Z",
  "versionId": "13a7555a-05a0-4f9a-be5a-437198dc5014"
}