{
  "active": false,
  "connections": {
    "When clicking ‚ÄòTest workflow‚Äô": {
      "main": [
        [
          {
            "node": "Fetch Projects",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Schedule Trigger": {
      "main": [
        [
          {
            "node": "Fetch Projects",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Fetch Projects": {
      "main": [
        [
          {
            "node": "Select Templates Project",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Select Templates Project": {
      "main": [
        [
          {
            "node": "Fetch Template Tasks",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Fetch Template Tasks": {
      "main": [
        [
          {
            "node": "Fetch Active Tasks",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Fetch Active Tasks": {
      "main": [
        [
          {
            "node": "Build Template Actions",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Build Template Actions": {
      "main": [
        [
          {
            "node": "Route Template Actions",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Route Template Actions": {
      "main": [
        [
          {
            "node": "Prepare Template Context",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Prepare Create Payload",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Prepare Template Context": {
      "main": [
        [
          {
            "node": "Delete Placeholder Task",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Prepare Create Payload": {
      "main": [
        [
          {
            "node": "Create Template Task",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Create Template Task": {
      "main": [
        [
          {
            "node": "Update Parent Map",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "createdAt": "2025-09-26T19:31:19.369Z",
  "id": "19pwlUJok6EXe0uu",
  "isArchived": false,
  "meta": {
    "templateCredsSetupCompleted": true
  },
  "name": "‚òëÔ∏è Todoist Template Expander",
  "nodes": [
    {
      "parameters": {},
      "type": "n8n-nodes-base.manualTrigger",
      "typeVersion": 1,
      "position": [
        -1808,
        480
      ],
      "name": "When clicking ‚ÄòTest workflow‚Äô",
      "id": "df0d5165-ab32-48f5-af77-831352b4c644"
    },
    {
      "parameters": {
        "rule": {
          "interval": [
            {
              "field": "minutes"
            }
          ]
        }
      },
      "type": "n8n-nodes-base.scheduleTrigger",
      "typeVersion": 1.2,
      "position": [
        -1808,
        672
      ],
      "name": "Schedule Trigger",
      "id": "29ddf615-47bd-4eea-8cb0-1b064629d3cc"
    },
    {
      "parameters": {
        "content": "## Todoist Template Expander\n\nReplaces shorthand tasks (`!!X`) by cloning from Templates project.",
        "height": 260,
        "width": 360
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        -1940,
        380
      ],
      "name": "Sticky Note",
      "id": "82d50695-65fb-4933-b8ca-d7985eaf5605"
    },
    {
      "parameters": {
        "resource": "project",
        "operation": "getAll"
      },
      "type": "n8n-nodes-base.todoist",
      "typeVersion": 2.1,
      "position": [
        -1584,
        576
      ],
      "name": "Fetch Projects",
      "retryOnFail": true,
      "waitBetweenTries": 2000,
      "id": "92269b1c-1481-4bba-8062-5c70dffb3c1b"
    },
    {
      "parameters": {
        "language": "python",
        "pythonCode": "def normalize_name(v):\n  return ''.join(ch for ch in (v or '').lower() if ch.isalnum())\nprojects=[i.json for i in _input.all()]\nfor p in projects:\n  if normalize_name(p.get('name',''))=='templates':\n    return [{'json':{'templatesProjectId':p.get('id'),'templatesProject':p}}]\nreturn []"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -1360,
        576
      ],
      "name": "Select Templates Project",
      "id": "749902c0-4a8d-43c0-bad1-569cbc87ee1f"
    },
    {
      "parameters": {
        "operation": "getAll",
        "returnAll": true,
        "filters": {
          "projectId": "={{$json.templatesProjectId}}"
        }
      },
      "type": "n8n-nodes-base.todoist",
      "typeVersion": 2.1,
      "position": [
        -1136,
        576
      ],
      "name": "Fetch Template Tasks",
      "retryOnFail": true,
      "waitBetweenTries": 2000,
      "id": "e5e8f02f-721c-45fc-8ee4-8d2c2ba4672e"
    },
    {
      "parameters": {
        "operation": "getAll",
        "returnAll": true,
        "filters": {}
      },
      "type": "n8n-nodes-base.todoist",
      "typeVersion": 2.1,
      "position": [
        -912,
        576
      ],
      "name": "Fetch Active Tasks",
      "retryOnFail": true,
      "waitBetweenTries": 2000,
      "id": "e9329433-72db-4a93-b025-3075fe28cb87"
    },
    {
      "parameters": {
        "language": "python",
        "pythonCode": "import re,collections\nDEBUG=False\nLIMIT_TO_TEST_PROJECT=True\nTEST='üß™ Test (meta)'\nnormalize=lambda v:'' if not v else ''.join(c for c in v.lower() if c.isalnum())\nsel=_('Select Templates Project').first()\nif not sel: return []\ntid=sel.json.get('templatesProjectId')\nif not tid: return []\nT=[i.json for i in _('Fetch Template Tasks').all()]\nif not T: return []\nprojects=[i.json for i in _('Fetch Projects').all()]\nallowed=set()\nif LIMIT_TO_TEST_PROJECT:\n  for p in projects:\n    if (p.get('name') or '').strip()==TEST: allowed.add(p.get('id'))\nelse:\n  allowed={p.get('id') for p in projects if p.get('id')!=tid}\nchildren=collections.defaultdict(list)\nfor t in T:\n  if t.get('parent_id'): children[t['parent_id']].append(t)\nfor s in children.values(): s.sort(key=lambda x:x.get('child_order',0))\nindex=[(t,normalize(t.get('content',''))) for t in T]\npat=re.compile(r'^!!\\s*(.+)$',re.I)\nout=[]\nfor t in [i.json for i in _input.all()]:\n  pid=t.get('project_id')\n  if pid==tid or (allowed and pid not in allowed): continue\n  m=pat.match(t.get('content','') or '')\n  if not m: continue\n  name=m.group(1).strip(); key=normalize(name)\n  c=[tt for tt,n in index if n==key]\n  c.sort(key=lambda tt:(tt.get('parent_id') is not None,tt.get('child_order',0)))\n  if not c: continue\n  root=c[0]\n  dq=collections.deque([root]);sub=[]\n  while dq:\n    cur=dq.popleft();sub.append(cur)\n    for ch in children.get(cur.get('id'),[]):dq.append(ch)\n  if not sub: continue\n  ph={'id':t.get('id'),'projectId':pid,'sectionId':t.get('section_id'),'parentId':t.get('parent_id'),'order':t.get('order'),'childOrder':t.get('child_order')}\n  phk=str(t.get('id'))\n  out.append({'json':{'action':'deletePlaceholder','placeholder':ph,'placeholderKey':phk,'totalCreateActions':len(sub)}})\n  for i,s in enumerate(sub):\n    out.append({'json':{'action':'createFromTemplate','placeholder':ph,'placeholderKey':phk,'task':{'templateId':s.get('id'),'parentTemplateId':s.get('parent_id'),'content':s.get('content',''),'description':s.get('description') or '','priority':s.get('priority'),'labels':s.get('labels') or [],'order':s.get('order'),'childOrder':s.get('child_order'),'due':s.get('due') or {},'isRoot':s.get('id')==root.get('id')},'isLastAction':i==len(sub)-1}})\nreturn out"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -688,
        576
      ],
      "name": "Build Template Actions",
      "id": "aaf97f2c-c3f9-49de-b678-6081b1588ec0"
    },
    {
      "parameters": {
        "dataType": "string",
        "value1": "={{$json.action}}",
        "rules": {
          "rules": [
            {
              "value2": "deletePlaceholder"
            },
            {
              "value2": "createFromTemplate"
            }
          ]
        }
      },
      "type": "n8n-nodes-base.switch",
      "typeVersion": 2,
      "position": [
        -464,
        576
      ],
      "name": "Route Template Actions",
      "id": "c82bfec6-d766-4bc8-b509-5175900f4580"
    },
    {
      "parameters": {
        "language": "python",
        "pythonCode": "def get_static_data():\n  return _getWorkflowStaticData('node')\n\ndata=get_static_data()\nit=_input.all()[0].json\nph=it.get('placeholder');k=str(it.get('placeholderKey') or ph.get('id'))\nctxs=data.get('contexts') or {}\nctxs[k]={'placeholder':ph,'parentMap':{},'remainingCreates':it.get('totalCreateActions',0),'pendingTemplateIds':[]}\ndata['contexts']=ctxs;data['currentPlaceholderKey']=k\nreturn _input.all()"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -240,
        480
      ],
      "name": "Prepare Template Context",
      "id": "4ac2ce27-0432-4fd2-a0fe-17657547ffd6"
    },
    {
      "parameters": {
        "operation": "delete",
        "taskId": "={{$json.placeholder.id}}"
      },
      "type": "n8n-nodes-base.todoist",
      "typeVersion": 2.1,
      "position": [
        -16,
        480
      ],
      "name": "Delete Placeholder Task",
      "retryOnFail": true,
      "waitBetweenTries": 2000,
      "id": "116ddc0d-2d90-48a0-af9a-a8b46b5a9505"
    },
    {
      "parameters": {
        "language": "python",
        "pythonCode": "data=_getWorkflowStaticData('node')\nit=_input.all()[0].json\nk=str(it.get('placeholderKey'))\nctxs=data.get('contexts') or {}\nctx=ctxs.get(k) or {'placeholder':it.get('placeholder') or {},'parentMap':{},'remainingCreates':it.get('totalCreateActions',0),'pendingTemplateIds':[]}\nph=ctx['placeholder'];pm=ctx['parentMap'];pending=ctx.get('pendingTemplateIds',[])\nt=it['task']\nopts={}\nif t.get('description'):opts['description']=t['description']\nif t.get('priority'):opts['priority']=t['priority']\nif t.get('isRoot'):\n  if ph.get('sectionId'):opts['section']=ph['sectionId']\n  if ph.get('parentId'):opts['parentId']=ph['parentId']\nelse:\n  pid=t.get('parentTemplateId')\n  if pid and pid in pm:opts['parentId']=pm[pid]\npending.append(t['templateId']);ctx['pendingTemplateIds']=pending\nctxs[k]=ctx;data['contexts']=ctxs\nreturn [{'json':{'placeholderKey':k,'placeholder':ph,'task':t,'create':{'content':t.get('content'), 'project':ph.get('projectId'), 'labels':t.get('labels',[]),'options':opts,'templateId':t.get('templateId'),'placeholderKey':k,'isLastAction':it.get('isLastAction')}}}]"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -240,
        672
      ],
      "name": "Prepare Create Payload",
      "id": "6b6db0f4-4201-465d-b7a1-67b1ba4fbc59"
    },
    {
      "parameters": {
        "project": "={{$json.create.project}}",
        "labels": "={{$json.create.labels}}",
        "content": "={{$json.create.content}}",
        "options": {}
      },
      "type": "n8n-nodes-base.todoist",
      "typeVersion": 2.1,
      "position": [
        -16,
        672
      ],
      "name": "Create Template Task",
      "retryOnFail": true,
      "waitBetweenTries": 2000,
      "id": "2ddfa31c-de40-4934-ac2a-2c1fae4d10ef"
    },
    {
      "parameters": {
        "language": "python",
        "pythonCode": "def _id(o):\n  if isinstance(o,dict):\n    if o.get('id'):return o['id']\n    for k in('task','data'):\n      if k in o:\n        r=_id(o[k]);\n        if r:return r\n    for v in o.values():\n      r=_id(v)\n      if r:return r\n  elif isinstance(o,list):\n    for v in o:\n      r=_id(v)\n      if r:return r\n  return None\n\ndata=_getWorkflowStaticData('node')\nit=_input.all()[0].json\nk=str(it.get('placeholderKey') or data.get('currentPlaceholderKey'))\nctxs=data.get('contexts') or {}\nctx=ctxs.get(k) or {'placeholder':{},'parentMap':{},'remainingCreates':0,'pendingTemplateIds':[]}\nnew_id=_id(it)\nif not new_id:raise ValueError('Failed to determine created task id')\npend=ctx.get('pendingTemplateIds',[])\ntid=pend.pop(0) if pend else it.get('task',{}).get('templateId')\nctx['parentMap'][tid]=new_id\nctx['pendingTemplateIds']=pend\nif isinstance(ctx.get('remainingCreates'),int) and ctx['remainingCreates']>0:ctx['remainingCreates']-=1\nif it.get('isLastAction') or ctx.get('remainingCreates') in (0,None):\n  ctxs.pop(k,None)\n  if data.get('currentPlaceholderKey')==k:data['currentPlaceholderKey']=None\nelse:ctxs[k]=ctx\ndata['contexts']=ctxs\nreturn _input.all()"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        208,
        672
      ],
      "name": "Update Parent Map",
      "id": "5ada9acb-5e71-4a1d-8c1a-0826f5ed1e5c"
    }
  ],
  "pinData": {},
  "repo_name": "n8n-workflows",
  "repo_owner": "pschmitt",
  "repo_path": "workflows",
  "settings": {
    "executionOrder": "v1"
  },
  "shared": [
    {
      "createdAt": "2025-09-26T19:31:19.374Z",
      "updatedAt": "2025-09-26T19:31:19.374Z",
      "role": "workflow:owner",
      "workflowId": "19pwlUJok6EXe0uu",
      "projectId": "DeJsGrmui3Dbhpxg"
    }
  ],
  "staticData": {
    "node:Schedule Trigger": {
      "recurrenceRules": []
    }
  },
  "tags": [
    {
      "createdAt": "2025-03-01T06:50:52.672Z",
      "updatedAt": "2025-03-01T06:50:52.672Z",
      "id": "mjfF2OqntfnQP15x",
      "name": "todoist"
    }
  ],
  "triggerCount": 1,
  "updatedAt": "2025-09-28T12:22:22.000Z",
  "versionId": "1b1f4f53-d8df-4fda-9321-df78f9e9acca"
}