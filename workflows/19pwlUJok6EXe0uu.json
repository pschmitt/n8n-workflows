{
  "active": false,
  "connections": {
    "When clicking ‘Test workflow’": {
      "main": [
        [
          {
            "node": "Fetch Projects",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Schedule Trigger": {
      "main": [
        [
          {
            "node": "Fetch Projects",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Fetch Projects": {
      "main": [
        [
          {
            "node": "Select Templates Project",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Select Templates Project": {
      "main": [
        [
          {
            "node": "Fetch Template Tasks",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Fetch Template Tasks": {
      "main": [
        [
          {
            "node": "Build Template Actions",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Build Template Actions": {
      "main": [
        [
          {
            "node": "Route Template Actions",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Route Template Actions": {
      "main": [
        [
          {
            "node": "Prepare Template Context",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Split in Batches (1)",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Prepare Template Context": {
      "main": [
        [
          {
            "node": "Delete Placeholder Task",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Split in Batches (1)": {
      "main": [
        [
          {
            "node": "Prepare Create Payload",
            "type": "main",
            "index": 0
          },
          {
            "node": "Split in Batches (1)",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Prepare Create Payload": {
      "main": [
        [
          {
            "node": "Create Template Task",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Create Template Task": {
      "main": [
        [
          {
            "node": "Merge (Combine) Create + Meta",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "Merge (Combine) Create + Meta": {
      "main": [
        [
          {
            "node": "Update Parent Map",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Update Parent Map": {
      "main": [
        [
          {
            "node": "Split in Batches (1)",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "createdAt": "2025-09-26T19:31:19.369Z",
  "id": "19pwlUJok6EXe0uu",
  "isArchived": false,
  "meta": {
    "templateCredsSetupCompleted": true
  },
  "name": "☑️ Todoist Template Expander (sequenced, nested, same section)",
  "nodes": [
    {
      "parameters": {},
      "type": "n8n-nodes-base.manualTrigger",
      "typeVersion": 1,
      "position": [
        -1024,
        -80
      ],
      "id": "9ec2fb45-8d50-45b5-a37e-2a40423b0aae",
      "name": "When clicking ‘Test workflow’"
    },
    {
      "parameters": {
        "rule": {
          "interval": [
            {
              "field": "minutes"
            }
          ]
        }
      },
      "type": "n8n-nodes-base.scheduleTrigger",
      "typeVersion": 1.2,
      "position": [
        -1024,
        112
      ],
      "id": "d94c059a-de78-41a4-8cdb-dc78043e003d",
      "name": "Schedule Trigger"
    },
    {
      "parameters": {
        "resource": "project",
        "operation": "getAll"
      },
      "type": "n8n-nodes-base.todoist",
      "typeVersion": 2.1,
      "position": [
        -768,
        -80
      ],
      "id": "e01ad8d8-95ea-40ef-b5da-e3d544db166b",
      "name": "Fetch Projects",
      "retryOnFail": true,
      "waitBetweenTries": 2000,
      "credentials": {
        "todoistApi": {
          "id": "7jDBSQS5HIVX5LSR",
          "name": "Todoist account (API Key)"
        }
      }
    },
    {
      "parameters": {
        "language": "python",
        "pythonCode": "def normalize_name(value):\n  if not value:\n    return \"\"\n  lowered = value.lower()\n  return \"\".join(ch for ch in lowered if ch.isalnum())\n\nprojects = [item.json for item in _input.all()]\n\ntemplates_project = None\nfor project in projects:\n  name = (project.get(\"name\") or \"\").strip()\n  if normalize_name(name) == \"templates\":\n    templates_project = project\n    break\n\nif not templates_project:\n  return []\n\nreturn [{\"json\": {\"templatesProjectId\": templates_project.get(\"id\"), \"templatesProject\": templates_project}}]\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -544,
        -80
      ],
      "id": "934d1e4a-e360-4d2d-a088-4e367402183e",
      "name": "Select Templates Project"
    },
    {
      "parameters": {
        "operation": "getAll",
        "returnAll": true,
        "filters": {
          "projectId": "={{$json.templatesProjectId}}"
        }
      },
      "type": "n8n-nodes-base.todoist",
      "typeVersion": 2.1,
      "position": [
        -304,
        -240
      ],
      "id": "88a99e09-b06a-4b9b-a9a6-bdc56ca4bf68",
      "name": "Fetch Template Tasks",
      "retryOnFail": true,
      "waitBetweenTries": 2000,
      "credentials": {
        "todoistApi": {
          "id": "7jDBSQS5HIVX5LSR",
          "name": "Todoist account (API Key)"
        }
      }
    },
    {
      "parameters": {
        "operation": "getAll",
        "returnAll": true,
        "filters": {}
      },
      "type": "n8n-nodes-base.todoist",
      "typeVersion": 2.1,
      "position": [
        -304,
        48
      ],
      "id": "486fe48b-f499-41d0-80bf-f29b2e75ae5b",
      "name": "Fetch Active Tasks",
      "retryOnFail": true,
      "waitBetweenTries": 2000,
      "credentials": {
        "todoistApi": {
          "id": "7jDBSQS5HIVX5LSR",
          "name": "Todoist account (API Key)"
        }
      }
    },
    {
      "parameters": {
        "language": "python",
        "pythonCode": "import re\nfrom collections import defaultdict, deque\n\n# Optional filter: keep False to process all projects except the template project\nLIMIT_TO_TEST_PROJECT = False\nTEST_PROJECT_NAME = \"\\ud83e\\uddea Test (meta)\"\n\ndef normalize_name(value):\n  if not value:\n    return \"\"\n  lowered = value.lower()\n  return \"\".join(ch for ch in lowered if ch.isalnum())\n\n# Inputs: 0 = template tasks, 1 = active tasks (placeholders)\ntry:\n  templ_items = _input.all(0)\nexcept Exception:\n  templ_items = _input.all()\ntry:\n  active_items = _input.all(1)\nexcept Exception:\n  active_items = []\n\nT = [it.json for it in templ_items]\nif not T:\n  return []\n\n# Infer the templates project id from any template task\nTID = None\nfor t in T:\n  pid = t.get('project_id')\n  if pid is not None:\n    TID = pid\n    break\nif TID is None:\n  return []\n\n# Build children index (sorted by child_order)\nchildren = defaultdict(list)\nfor t in T:\n  pid = t.get('parent_id')\n  if pid:\n    children[pid].append(t)\nfor arr in children.values():\n  arr.sort(key=lambda x: x.get('child_order', 0))\n\n# Normalize template names for lookup\nindex = [(t, normalize_name(t.get('content', ''))) for t in T]\nplaceholder_re = re.compile(r'^!!\\s*(.+)$', re.IGNORECASE)\n\nout = []\nfor it in active_items:\n  task = it.json\n  pid = task.get('project_id')\n\n  # Never act inside the Templates project itself\n  if pid == TID:\n    continue\n\n  m = placeholder_re.match(task.get('content', '') or '')\n  if not m:\n    continue\n\n  key = normalize_name(m.group(1).strip())\n  cands = [tt for (tt, nn) in index if nn == key]\n  # Prefer roots (no parent) first, then by child_order\n  cands.sort(key=lambda tt: (tt.get('parent_id') is not None, tt.get('child_order', 0)))\n  if not cands:\n    continue\n\n  root = cands[0]\n\n  # BFS to collect entire subtree in creation order\n  q = deque([root])\n  sub = []\n  while q:\n    cur = q.popleft()\n    sub.append(cur)\n    for ch in children.get(cur.get('id'), []):\n      q.append(ch)\n\n  ph = {\n    'id': task.get('id'),\n    'project_id': pid,\n    'section_id': task.get('section_id'),\n    'parent_id': task.get('parent_id')\n  }\n  phk = str(task.get('id'))\n\n  out.append({\n    'json': {\n      'action': 'deletePlaceholder',\n      'placeholder': ph,\n      'placeholderKey': phk,\n      'totalCreateActions': len(sub)\n    }\n  })\n\n  for i, tt in enumerate(sub):\n    payload = {\n      'templateId': tt.get('id'),\n      'parentTemplateId': tt.get('parent_id'),\n      'content': tt.get('content', ''),\n      'description': tt.get('description') or '',\n      'priority': tt.get('priority'),\n      'labels': tt.get('labels') or [],\n      'due': tt.get('due') or {},\n      'isRoot': tt.get('id') == root.get('id')\n    }\n    out.append({\n      'json': {\n        'action': 'createFromTemplate',\n        'placeholder': ph,\n        'placeholderKey': phk,\n        'task': payload,\n        'isLastAction': i == len(sub) - 1\n      }\n    })\n\nreturn out\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -48,
        48
      ],
      "id": "c046b960-08ac-41eb-99a8-88be79118ad0",
      "name": "Build Template Actions"
    },
    {
      "parameters": {
        "dataType": "string",
        "value1": "={{$json.action}}",
        "rules": {
          "rules": [
            {
              "value2": "deletePlaceholder"
            },
            {
              "value2": "createFromTemplate"
            }
          ]
        }
      },
      "type": "n8n-nodes-base.switch",
      "typeVersion": 2,
      "position": [
        176,
        48
      ],
      "id": "27d7b701-c3a8-44fc-a767-f8dc6d114a3b",
      "name": "Route Template Actions"
    },
    {
      "parameters": {
        "language": "python",
        "pythonCode": "data = _getWorkflowStaticData('global')\nitems = list(_input.all())\nif not items:\n  data['contexts'] = {}\n  data['currentPlaceholderKey'] = None\n  return []\nitem = items[0].json\nph = item.get('placeholder')\nkey = str(item.get('placeholderKey') or (ph or {}).get('id'))\nctxs = data.get('contexts') or {}\nctxs[key] = { 'placeholder': ph, 'parentMap': {}, 'remainingCreates': item.get('totalCreateActions', 0), 'pendingTemplateIds': [] }\ndata['contexts'] = ctxs\ndata['currentPlaceholderKey'] = key\nreturn items\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        416,
        -80
      ],
      "id": "45860649-7660-4d4b-ab57-06a11e6ba393",
      "name": "Prepare Template Context"
    },
    {
      "parameters": {
        "operation": "delete",
        "taskId": "={{$json.placeholder.id}}"
      },
      "type": "n8n-nodes-base.todoist",
      "typeVersion": 2.1,
      "position": [
        640,
        -80
      ],
      "id": "3e3dc90e-5e1c-4188-a776-3d1a17995e5d",
      "name": "Delete Placeholder Task",
      "retryOnFail": true,
      "waitBetweenTries": 2000,
      "credentials": {
        "todoistApi": {
          "id": "7jDBSQS5HIVX5LSR",
          "name": "Todoist account (API Key)"
        }
      }
    },
    {
      "parameters": {
        "batchSize": 1,
        "options": {}
      },
      "type": "n8n-nodes-base.splitInBatches",
      "typeVersion": 1,
      "position": [
        416,
        192
      ],
      "id": "a5a7cbcc-0342-4ea0-a167-afa9e0c7d2b0",
      "name": "Split in Batches (1)"
    },
    {
      "parameters": {
        "language": "python",
        "pythonCode": "def get_json(x):\n  if hasattr(x,'json'): return x.json\n  if isinstance(x,dict): return x.get('json',{})\n  return {}\n\ndata = _getWorkflowStaticData('global')\nitems = _input.all()\nif not items: return []\nj = get_json(items[0])\nph = j.get('placeholder') or {}\nkey = str(j.get('placeholderKey') or ph.get('id'))\ndata['currentPlaceholderKey'] = key\nctxs = data.get('contexts') or {}\nctx = ctxs.get(key)\nif not ctx:\n  ctx = { 'placeholder': ph, 'parentMap': {}, 'remainingCreates': j.get('totalCreateActions', 0), 'pendingTemplateIds': [] }\n  ctxs[key] = ctx; data['contexts'] = ctxs\nparent_map = ctx.get('parentMap') or {}\n\ntask = j.get('task') or {}\nif not task: raise ValueError('Missing template task payload')\n\ncreate = { 'content': task.get('content',''), 'project': ph.get('project_id'), 'labels': task.get('labels') or [], 'description': task.get('description') or '' }\n\nif task.get('isRoot'):\n  if ph.get('section_id') is not None: create['section'] = ph.get('section_id')\n  if ph.get('parent_id') is not None: create['parent'] = ph.get('parent_id')\nelse:\n  ptempl = task.get('parentTemplateId')\n  if ptempl is not None:\n    pid = parent_map.get(ptempl)\n    if pid is None: raise ValueError('Parent not yet created')\n    create['parent'] = pid\n\nprio = task.get('priority')\nif isinstance(prio,int) and prio>0: create['priority'] = prio\n\ndue = task.get('due') or {}\nif due.get('string'): create['dueString'] = due['string']\nelif due.get('datetime'): create['dueDateTime'] = due['datetime']\nelif due.get('date'): create['dueDate'] = due['date']\n\nif not isinstance(create['labels'], list): create['labels'] = [create['labels']]\n\ntid = task.get('templateId')\nctx.setdefault('pendingTemplateIds', []).append(tid)\nctxs[key] = ctx; data['contexts'] = ctxs\n\ncreate['templateId'] = tid\ncreate['placeholderKey'] = key\ncreate['isLastAction'] = j.get('isLastAction', False)\n\nreturn [{ 'json': { **j, 'create': create } }]\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        640,
        192
      ],
      "id": "f1022d5c-e02a-4f8e-9725-3138432b8a51",
      "name": "Prepare Create Payload"
    },
    {
      "parameters": {
        "project": "={{$json.create.project}}",
        "labels": "={{$json.create.labels}}",
        "content": "={{$json.create.content}}",
        "options": {}
      },
      "type": "n8n-nodes-base.todoist",
      "typeVersion": 2.1,
      "position": [
        864,
        192
      ],
      "id": "12fe5a87-8a16-47d3-98c5-a7f136562761",
      "name": "Create Template Task",
      "retryOnFail": true,
      "waitBetweenTries": 2000,
      "credentials": {
        "todoistApi": {
          "id": "7jDBSQS5HIVX5LSR",
          "name": "Todoist account (API Key)"
        }
      }
    },
    {
      "parameters": {
        "mode": "combine",
        "options": {}
      },
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3,
      "position": [
        1072,
        192
      ],
      "id": "69f4e12f-b67a-402b-a43f-0d34010f0469",
      "name": "Merge (Combine) Create + Meta"
    },
    {
      "parameters": {
        "language": "python",
        "pythonCode": "def is_string_like(x): return isinstance(x,(str,bytes,bytearray))\n\ndef is_mapping_like(x): return isinstance(x,dict) or hasattr(x,'keys') or hasattr(x,'items')\n\ndef is_sequence_like(x):\n  if isinstance(x,(list,tuple)): return True\n  if is_string_like(x): return False\n  return hasattr(x,'__len__') and hasattr(x,'__getitem__')\n\ndef mget(o,k,d=None):\n  if isinstance(o,dict): return o.get(k,d)\n  try: return o[k]\n  except Exception: pass\n  try: return getattr(o,k)\n  except Exception: return d\n\ndef iter_values(o):\n  if isinstance(o,dict):\n    for v in o.values(): yield v; return\n  try:\n    for v in o.values(): yield v; return\n  except Exception: pass\n  try:\n    for _,v in o.items(): yield v; return\n  except Exception: pass\n  try:\n    for k in o.keys(): yield mget(o,k)\n  except Exception: return\n\ndef iter_task_ids(payload):\n  if hasattr(payload,'json'): payload=payload.json\n  if is_mapping_like(payload):\n    tid=mget(payload,'id')\n    if tid: yield tid\n    for k in ('data','task','json'):\n      inner=mget(payload,k)\n      if inner is not None:\n        for x in iter_task_ids(inner): yield x\n    for v in iter_values(payload):\n      for x in iter_task_ids(v): yield x\n    return\n  if is_sequence_like(payload):\n    try: n=len(payload)\n    except Exception: n=0\n    for i in range(n):\n      try: v=payload[i]\n      except Exception: continue\n      for x in iter_task_ids(v): yield x\n    return\n  return\n\ndef to_str(v): return None if v is None else str(v)\n\ndata=_getWorkflowStaticData('global')\nctxs=data.get('contexts') or {}\ncurrent_key=to_str(data.get('currentPlaceholderKey'))\n\nout=[]\nfor item in _input.all():\n  ids=list(iter_task_ids(item))\n  if not ids:\n    j=getattr(item,'json',None)\n    ids=list(iter_task_ids(j))\n  if not ids: raise ValueError('Failed to determine created task id')\n\n  key=current_key\n  if key is None and isinstance(ctxs,dict) and len(ctxs)==1: key=to_str(next(iter(ctxs.keys())))\n  if key is None:\n    j=getattr(item,'json',None)\n    if is_mapping_like(j): key=to_str(mget(j,'placeholderKey'))\n  if key is None: raise ValueError('Missing placeholder key when updating parent map')\n\n  ctx=ctxs.get(key) or {'placeholder':{},'parentMap':{},'remainingCreates':0,'pendingTemplateIds':[]}\n  pm=ctx.get('parentMap') or {}\n  pend=list(ctx.get('pendingTemplateIds') or [])\n\n  for new_id in ids:\n    if pend: templ=pend.pop(0)\n    else:\n      templ=None\n      j=getattr(item,'json',None)\n      if is_mapping_like(j):\n        tp=mget(j,'create',{})\n        if is_mapping_like(tp): templ=mget(tp,'templateId')\n    if templ is None: raise ValueError('Missing template id for created task (pending queue empty)')\n    pm[templ]=new_id\n\n  ctx['parentMap']=pm\n  ctx['pendingTemplateIds']=pend\n  rem=ctx.get('remainingCreates')\n  if isinstance(rem,int) and rem>0: ctx['remainingCreates']=max(0, rem-len(ids))\n\n  is_last = ctx.get('remainingCreates') in (None,0)\n  j=getattr(item,'json',None)\n  if is_mapping_like(j) and mget(j,'isLastAction'): is_last=True\n\n  if is_last:\n    ctxs.pop(key, None)\n    if to_str(data.get('currentPlaceholderKey'))==key: data['currentPlaceholderKey']=None\n  else:\n    ctxs[key]=ctx\n\n  out.append({ 'json': getattr(item,'json',{}) or {} })\n\n# persist\ndata['contexts']=ctxs if ctxs else {}\nif not ctxs: data['currentPlaceholderKey']=None\nreturn out\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1296,
        192
      ],
      "id": "634f7228-decb-47e7-9d72-219ff3763152",
      "name": "Update Parent Map"
    }
  ],
  "pinData": {},
  "repo_name": "n8n-workflows",
  "repo_owner": "pschmitt",
  "repo_path": "workflows",
  "settings": {
    "executionOrder": "v1"
  },
  "shared": [
    {
      "createdAt": "2025-09-26T19:31:19.374Z",
      "updatedAt": "2025-09-26T19:31:19.374Z",
      "role": "workflow:owner",
      "workflowId": "19pwlUJok6EXe0uu",
      "projectId": "DeJsGrmui3Dbhpxg"
    }
  ],
  "staticData": {
    "node:Schedule Trigger": {
      "recurrenceRules": []
    }
  },
  "tags": [
    {
      "createdAt": "2025-03-01T06:50:52.672Z",
      "updatedAt": "2025-03-01T06:50:52.672Z",
      "id": "mjfF2OqntfnQP15x",
      "name": "todoist"
    }
  ],
  "triggerCount": 1,
  "updatedAt": "2025-09-29T09:12:32.000Z",
  "versionId": "5bd00987-5a25-46c3-a218-0aac23c89ac7"
}