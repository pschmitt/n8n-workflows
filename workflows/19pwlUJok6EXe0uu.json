{
  "active": true,
  "connections": {
    "When clicking \u2018Test workflow\u2019": {
      "main": [
        [
          {
            "node": "Merge",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Task added/updated": {
      "main": [
        [
          {
            "node": "Process webhook data",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Process webhook data": {
      "main": [
        [
          {
            "node": "Merge",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "Merge": {
      "main": [
        [
          {
            "node": "Fetch Projects",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Fetch Projects": {
      "main": [
        [
          {
            "node": "Select Templates Project",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Select Templates Project": {
      "main": [
        [
          {
            "node": "Fetch Template Tasks",
            "type": "main",
            "index": 0
          },
          {
            "node": "Fetch Templated Tasks",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Fetch Template Tasks": {
      "main": [
        [
          {
            "node": "Build Template Actions",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Build Template Actions": {
      "main": [
        [
          {
            "node": "Split In Batches (size 1)",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Route Template Actions": {
      "main": [
        [
          {
            "node": "Prepare Template Context",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Prepare Create Payload",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Prepare Template Context": {
      "main": [
        [
          {
            "node": "Delete Placeholder Task",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Split In Batches (size 1)": {
      "main": [
        [
          {
            "node": "Route Template Actions",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Prepare Create Payload": {
      "main": [
        [
          {
            "node": "Create Template Task",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Create Template Task": {
      "main": [
        [
          {
            "node": "Update Parent Map",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Update Parent Map": {
      "main": [
        [
          {
            "node": "Split In Batches (size 1)",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Delete Placeholder Task": {
      "main": [
        [
          {
            "node": "Split In Batches (size 1)",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Fetch Templated Tasks": {
      "main": [
        [
          {
            "node": "Build Template Actions",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "createdAt": "2025-09-26T19:31:19.369Z",
  "id": "19pwlUJok6EXe0uu",
  "isArchived": false,
  "meta": {
    "templateCredsSetupCompleted": true
  },
  "name": "\u2611\ufe0f Todoist Template Expander (recursive, same-section)",
  "nodes": [
    {
      "parameters": {},
      "type": "n8n-nodes-base.manualTrigger",
      "typeVersion": 1,
      "position": [
        -128,
        200
      ],
      "name": "When clicking \u2018Test workflow\u2019",
      "id": "dbd39a33-8420-4ab9-a82f-0581edaa808d"
    },
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "a6f7c8d9-2b4f-4f7f-a8c9-3d9a2b4f7f7f",
        "options": {}
      },
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 2,
      "position": [
        -352,
        8
      ],
      "name": "Task added/updated",
      "id": "72e7e44b-3d4a-4545-8970-ef457c06160c",
      "webhookId": "a6f7c8d9-2b4f-4f7f-a8c9-3d9a2b4f7f7f"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "02f2e06e-0dc6-472b-a4c4-691a8a3ced6f",
              "name": "id",
              "value": "={{ $json.body.event_data.id }}",
              "type": "string"
            },
            {
              "id": "9d362483-8501-4fb8-b7f2-cf7437c06024",
              "name": "content",
              "value": "={{ $json.body.event_data.content }}",
              "type": "string"
            },
            {
              "id": "a0e984ff-7805-4d5a-883f-0a94c18b6679",
              "name": "project_id",
              "value": "={{ $json.body.event_data.project_id }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -128,
        8
      ],
      "name": "Process webhook data",
      "id": "ad787c3f-c37e-44b1-8263-62fff54d60d0"
    },
    {
      "parameters": {},
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3,
      "position": [
        96,
        104
      ],
      "name": "Merge",
      "id": "c294c58b-c049-4416-abbf-d62f21d4ebfc"
    },
    {
      "parameters": {
        "content": "## Todoist Template Expander (recursive)\nFinds `!! TemplateName` tasks, deletes the placeholder, and clones the matching template (including all subtasks) into the **same project & section** as the placeholder. Creation is serialized with Split In Batches (size 1) so parent/child order is preserved.",
        "height": 300,
        "width": 480
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        -320,
        60
      ],
      "name": "Sticky Note",
      "id": "cf71865c-4d56-4b39-8d4a-a883a17e1cbd"
    },
    {
      "parameters": {
        "resource": "project",
        "operation": "getAll"
      },
      "type": "n8n-nodes-base.todoist",
      "typeVersion": 2.1,
      "position": [
        320,
        104
      ],
      "name": "Fetch Projects",
      "id": "98f494c3-dfbd-42d5-946d-14cf878d6cd5",
      "retryOnFail": true,
      "waitBetweenTries": 2000,
      "credentials": {
        "todoistApi": {
          "id": "7jDBSQS5HIVX5LSR",
          "name": "Todoist account (API Key)"
        }
      }
    },
    {
      "parameters": {
        "language": "python",
        "pythonCode": "def normalize_name(value):\n    if not value:\n        return ''\n    first_alnum_index = -1\n    for i, char in enumerate(value):\n        if char.isalnum():\n            first_alnum_index = i\n            break\n    if first_alnum_index == -1:\n        return ''\n    value = value[first_alnum_index:]\n    return ''.join(ch for ch in value.lower() if ch.isalnum())\n\nprojects = [i.json for i in _input.all()]\n\ntemplates_project = None\ntest_project = None\n\nfor project in projects:\n    normalized = normalize_name(project.get('name', ''))\n    if normalized == 'templates' and templates_project is None:\n        templates_project = project\n    if normalized == 'testmeta' and test_project is None:\n        test_project = project\n\nif not templates_project or not test_project:\n    return []\n\nreturn [{\n    'json': {\n        'templatesProjectId': templates_project.get('id'),\n        'templatesProject': templates_project,\n        'testProjectId': test_project.get('id'),\n        'testProject': test_project,\n    }\n}]"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        544,
        104
      ],
      "name": "Select Templates Project",
      "id": "6c3cff41-f422-49cd-a600-746a8e05859e"
    },
    {
      "parameters": {
        "operation": "getAll",
        "returnAll": true,
        "filters": {
          "projectId": "={{$json.templatesProjectId}}"
        }
      },
      "type": "n8n-nodes-base.todoist",
      "typeVersion": 2.1,
      "position": [
        768,
        104
      ],
      "name": "Fetch Template Tasks",
      "id": "e1de2fe8-044e-4056-b4fa-49d5869faf1b",
      "retryOnFail": true,
      "waitBetweenTries": 2000,
      "credentials": {
        "todoistApi": {
          "id": "7jDBSQS5HIVX5LSR",
          "name": "Todoist account (API Key)"
        }
      }
    },
    {
      "parameters": {
        "operation": "getAll",
        "returnAll": true,
        "filters": {
          "projectId": "={{$node[\"Select Templates Project\"].json.testProjectId}}",
          "filter": "@templated"
        }
      },
      "type": "n8n-nodes-base.todoist",
      "typeVersion": 2.1,
      "position": [
        768,
        8
      ],
      "name": "Fetch Templated Tasks",
      "id": "5c0cf404-f81e-47be-980f-0dd9a33a2c6c",
      "retryOnFail": true,
      "waitBetweenTries": 2000,
      "credentials": {
        "todoistApi": {
          "id": "7jDBSQS5HIVX5LSR",
          "name": "Todoist account (API Key)"
        }
      }
    },
    {
      "parameters": {
        "language": "python",
        "pythonCode": "from collections import defaultdict\n\ndef to_key(value):\n    if value is None:\n        return None\n    if isinstance(value, str):\n        value = value.strip()\n        return value or None\n    return str(value)\n\ndef normalize_name(value):\n    if not value:\n        return ''\n    first_alnum_index = -1\n    for i, char in enumerate(value):\n        if char.isalnum():\n            first_alnum_index = i\n            break\n    if first_alnum_index == -1:\n        return ''\n    value = value[first_alnum_index:]\n    return ''.join(ch for ch in value.lower() if ch.isalnum())\n\ndef pick_value(*values):\n    for value in values:\n        if value is not None:\n            return value\n    return None\n\ndef build_payload(template, is_root):\n    return {\n        'templateId': template.get('id'),\n        'parentTemplateId': pick_value(template.get('parent_id'), template.get('parentId')),\n        'content': template.get('content', ''),\n        'description': template.get('description') or '',\n        'priority': template.get('priority'),\n        'labels': template.get('labels') or [],\n        'order': template.get('order'),\n        'childOrder': pick_value(template.get('child_order'), template.get('childOrder')),\n        'due': template.get('due') or {},\n        'isRoot': is_root,\n    }\n\ndef gather_templates():\n    tasks = []\n    for item in _('Fetch Template Tasks').all():\n        payload = getattr(item, 'json', None) or {}\n        if isinstance(payload, dict):\n            tasks.append(payload)\n    return tasks\n\ndef gather_templated_tasks():\n    tasks = []\n    for item in _('Fetch Templated Tasks').all():\n        payload = getattr(item, 'json', None) or {}\n        if isinstance(payload, dict):\n            tasks.append(payload)\n    return tasks\n\nsel = _('Select Templates Project').first()\nif not sel:\n    return []\nsettings = getattr(sel, 'json', {}) or {}\ntemplates_project_id = settings.get('templatesProjectId')\ntest_project_id = settings.get('testProjectId')\nif not templates_project_id or not test_project_id:\n    return []\n\ntemplated_tasks = gather_templated_tasks()\nif not templated_tasks:\n    return []\n\ntemplate_tasks = gather_templates()\nif not template_tasks:\n    return []\n\ntest_project_key = to_key(test_project_id)\nif test_project_key is None:\n    return []\n\nchildren = defaultdict(list)\nfor task in template_tasks:\n    parent_raw = pick_value(task.get('parent_id'), task.get('parentId'))\n    if parent_raw:\n        parent_key = to_key(parent_raw)\n        if parent_key:\n            children[parent_key].append(task)\n\nfor siblings in children.values():\n    siblings.sort(key=lambda x: pick_value(x.get('child_order'), x.get('childOrder')) or 0)\n\ndef walk_subtree(root):\n    ordered = []\n    stack = [root]\n    while stack:\n        node = stack.pop()\n        ordered.append(node)\n        node_key = to_key(pick_value(node.get('id'), node.get('task_id'), node.get('taskId')))\n        kid_list = children.get(node_key, [])\n        for child in reversed(kid_list):\n            stack.append(child)\n    return ordered\n\nindex = {}\nfor task in template_tasks:\n    if pick_value(task.get('parent_id'), task.get('parentId')):\n        continue\n    name = normalize_name(task.get('content', ''))\n    if name:\n        index.setdefault(name, []).append(task)\n\nfor candidates in index.values():\n    candidates.sort(key=lambda task: (pick_value(task.get('child_order'), task.get('childOrder')) or 0, pick_value(task.get('id'), task.get('task_id'), task.get('taskId'))))\n\ndef build_placeholder(payload):\n    return {\n        'id': payload.get('id'),\n        'project_id': pick_value(payload.get('project_id'), payload.get('projectId')),\n        'projectId': payload.get('projectId'),\n        'section_id': pick_value(payload.get('section_id'), payload.get('sectionId')),\n        'sectionId': payload.get('sectionId'),\n        'parent_id': pick_value(payload.get('parent_id'), payload.get('parentId')),\n        'parentId': payload.get('parentId'),\n        'order': payload.get('order'),\n        'child_order': pick_value(payload.get('child_order'), payload.get('childOrder')),\n    }\n\nresults = []\n\nfor payload in templated_tasks:\n    project_id = pick_value(payload.get('project_id'), payload.get('projectId'))\n    if to_key(project_id) != test_project_key:\n        continue\n    placeholder_name = normalize_name(payload.get('content') or '')\n    if not placeholder_name:\n        continue\n    candidates = index.get(placeholder_name, [])\n    if not candidates:\n        continue\n    root = candidates[0]\n    subtree = walk_subtree(root)\n    if not subtree:\n        continue\n\n    placeholder = build_placeholder(payload)\n    placeholder_key = to_key(placeholder.get('id'))\n    if placeholder_key is None:\n        continue\n\n    total_creates = len(subtree)\n    root_payload = build_payload(subtree[0], True)\n\n    results.append({'json': {\n        'action': 'preparePlaceholder',\n        'placeholder': placeholder,\n        'placeholderKey': placeholder_key,\n        'rootTask': root_payload,\n        'totalCreateActions': total_creates,\n    }})\n\n    for idx, tmpl in enumerate(subtree):\n        task_payload = build_payload(tmpl, idx == 0)\n        results.append({'json': {\n            'action': 'createFromTemplate',\n            'placeholder': placeholder,\n            'placeholderKey': placeholder_key,\n            'task': task_payload,\n            'isLastAction': (idx + 1) == total_creates,\n        }})\n\nreturn results"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        992,
        104
      ],
      "name": "Build Template Actions",
      "id": "3cd61c36-a37a-4548-aa70-c4dca4d2645d",
      "alwaysOutputData": false
    },
    {
      "parameters": {
        "dataType": "string",
        "value1": "={{$json.action}}",
        "rules": {
          "rules": [
            {
              "value2": "preparePlaceholder"
            },
            {
              "value2": "createFromTemplate"
            }
          ]
        }
      },
      "type": "n8n-nodes-base.switch",
      "typeVersion": 2,
      "position": [
        1440,
        -112
      ],
      "name": "Route Template Actions",
      "id": "9f2fe8ab-6c0d-4d6b-bbd5-45684ac587d2"
    },
    {
      "parameters": {
        "language": "python",
        "pythonCode": "def to_key(value):\n  if value is None:\n    return None\n  if isinstance(value, str):\n    value = value.strip()\n    return value or None\n  return str(value)\n\ndef to_int(value):\n  try:\n    return int(value)\n  except Exception:\n    return 0\n\ndata = _getWorkflowStaticData('global')\nitems = list(_input.all())\nif not items:\n  data['contexts'] = {}\n  data['currentPlaceholderKey'] = None\n  return []\n\npayload = items[0].json or {}\nplaceholder = payload.get('placeholder') or {}\nroot_task = payload.get('rootTask') or {}\n\nplaceholder_key = to_key(payload.get('placeholderKey') or placeholder.get('id'))\nif placeholder_key is None:\n  raise ValueError('Missing placeholder key for template expansion')\n\nremaining = to_int(payload.get('totalCreateActions'))\nif remaining <= 0:\n  raise ValueError('Template expansion requires at least one create action')\n\ncontexts = data.get('contexts')\nif not isinstance(contexts, dict):\n  contexts = {}\n\ncontexts[placeholder_key] = {\n  'placeholder': placeholder,\n  'createdByTemplate': {},\n  'pendingTemplates': [],\n  'remainingCreates': remaining,\n  'rootTemplateId': to_key(root_task.get('templateId')),\n}\n\ndata['contexts'] = contexts\ndata['currentPlaceholderKey'] = placeholder_key\n\npayload['rootTemplateId'] = to_key(root_task.get('templateId'))\npayload['deletePlaceholderId'] = placeholder.get('id')\n\nreturn [{'json': payload}]"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1664,
        -112
      ],
      "name": "Prepare Template Context",
      "id": "816f37af-7abd-4176-9b6f-60ccf8e6a94d"
    },
    {
      "parameters": {
        "operation": "delete",
        "taskId": "={{$json.deletePlaceholderId ?? $json.placeholder.id}}"
      },
      "type": "n8n-nodes-base.todoist",
      "typeVersion": 2.1,
      "position": [
        1888,
        -112
      ],
      "name": "Delete Placeholder Task",
      "id": "3fe12683-554d-494f-b752-df1d91202ae7",
      "retryOnFail": true,
      "waitBetweenTries": 2000,
      "credentials": {
        "todoistApi": {
          "id": "7jDBSQS5HIVX5LSR",
          "name": "Todoist account (API Key)"
        }
      }
    },
    {
      "parameters": {
        "batchSize": 1,
        "options": {}
      },
      "type": "n8n-nodes-base.splitInBatches",
      "typeVersion": 2,
      "position": [
        1216,
        104
      ],
      "name": "Split In Batches (size 1)",
      "id": "2afec9b7-95f6-4f15-b4d6-9e26680c171e"
    },
    {
      "parameters": {
        "language": "python",
        "pythonCode": "def to_key(value):\n  if value is None:\n    return None\n  if isinstance(value, str):\n    value = value.strip()\n    return value or None\n  return str(value)\n\ndef to_identifier(value):\n  if value is None:\n    return None\n  if isinstance(value, bool):\n    value = int(value)\n  if isinstance(value, (int, float)):\n    if isinstance(value, float) and not value.is_integer():\n      return str(value)\n    return int(value)\n  if isinstance(value, str):\n    value = value.strip()\n    return value or None\n  return to_key(value)\n\ndef pick_value(*values):\n  for value in values:\n    if value is not None:\n      return value\n  return None\n\ndef cleaned_option(value):\n  if value is None:\n    return None\n  if isinstance(value, (list, dict)) and not value:\n    return None\n  if isinstance(value, str):\n    stripped = value.strip()\n    if not stripped:\n      return None\n    return stripped\n  return value\n\ndata = _getWorkflowStaticData('global')\nitems = _input.all()\nif not items:\n  return []\n\nitem_json = items[0].json or {}\nplaceholder = item_json.get('placeholder') or {}\nplaceholder_key = to_key(item_json.get('placeholderKey') or placeholder.get('id'))\nif placeholder_key is None:\n  raise ValueError('Missing placeholder key for task creation')\n\ndata['currentPlaceholderKey'] = placeholder_key\n\ncontexts = data.get('contexts') or {}\ncontext = contexts.get(placeholder_key)\nif context is None:\n  raise ValueError(f\"Missing template context for placeholder {placeholder_key}\")\n\nparent_map = context.get('createdByTemplate')\nif not isinstance(parent_map, dict):\n  parent_map = {}\n  context['createdByTemplate'] = parent_map\n\npending_queue = context.get('pendingTemplates')\nif not isinstance(pending_queue, list):\n  pending_queue = []\n\ntask = item_json.get('task') or {}\nif not task:\n  raise ValueError('Missing template task payload')\n\ntemplate_id = to_key(task.get('templateId'))\nif template_id is None:\n  raise ValueError('Missing template id in template task payload')\n\nis_root = bool(task.get('isRoot'))\noptions = {}\n\nproject_id = pick_value(placeholder.get('project_id'), placeholder.get('projectId'))\nproject_ident = to_identifier(project_id)\nif project_ident is None:\n  raise ValueError('Missing project id for placeholder task')\n\nsection_value = pick_value(placeholder.get('section_id'), placeholder.get('sectionId'))\nsection_id = to_identifier(section_value)\nif is_root and section_id is not None:\n  options['sectionId'] = section_id\n\nif is_root:\n  placeholder_parent = pick_value(placeholder.get('parent_id'), placeholder.get('parentId'))\n  parent_id = to_identifier(placeholder_parent)\nelse:\n  parent_template_id = to_key(task.get('parentTemplateId'))\n  if parent_template_id is None:\n    raise ValueError('Missing parent template id for template task')\n  parent_id = to_identifier(parent_map.get(parent_template_id))\n  if parent_id is None:\n    raise ValueError(f\"Parent for template {parent_template_id} not created yet\")\n\nif parent_id is not None:\n  options['parentId'] = parent_id\n\ndescription = cleaned_option(task.get('description'))\nif description is not None:\n  options['description'] = description\n\npriority = task.get('priority')\nif isinstance(priority, int) and priority > 0:\n  options['priority'] = priority\n\ndue = task.get('due') or {}\ndue_string = cleaned_option(due.get('string'))\nif due_string is not None:\n  options['dueString'] = due_string\nelse:\n  due_datetime = cleaned_option(due.get('datetime'))\n  if due_datetime is not None:\n    options['dueDateTime'] = due_datetime\n  else:\n    due_date = cleaned_option(due.get('date'))\n    if due_date is not None:\n      options['dueDate'] = due_date\n\nlabels = task.get('labels') or []\nif not isinstance(labels, list):\n  labels = [labels]\nnormalized_labels = []\nfor label in labels:\n  ident = to_identifier(label)\n  if ident is not None:\n    normalized_labels.append(ident)\n\npending_queue.append(template_id)\ncontext['pendingTemplates'] = pending_queue\ncontexts[placeholder_key] = context\ndata['contexts'] = contexts\n\ncreate_options = {k: v for k, v in options.items() if cleaned_option(v) is not None}\n\ncreate_payload = {\n  'content': task.get('content', ''),\n  'project': project_ident,\n  'labels': normalized_labels,\n  'options': create_options,\n  'templateId': template_id,\n  'placeholderKey': placeholder_key,\n  'isLastAction': bool(item_json.get('isLastAction')),\n}\n\nreturn [{'json': {**item_json, 'create': create_payload}}]"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1664,
        80
      ],
      "name": "Prepare Create Payload",
      "id": "acd7b8a9-04b3-4bfb-a13e-1bc44340ea97"
    },
    {
      "parameters": {
        "project": "={{$json.create.project}}",
        "labels": "={{$json.create.labels}}",
        "content": "={{$json.create.content}}",
        "options": {
          "description": "={{$json.create.options.description}}",
          "dueDateTime": "={{$json.create.options.dueDateTime}}",
          "dueString": "={{$json.create.options.dueString}}",
          "parentId": "={{$json.create.options.parentId}}",
          "priority": "={{$json.create.options.priority}}",
          "dueDate": "={{$json.create.options.dueDate}}"
        }
      },
      "type": "n8n-nodes-base.todoist",
      "typeVersion": 2.1,
      "position": [
        1888,
        80
      ],
      "name": "Create Template Task",
      "id": "c8b948db-0a04-4961-8905-96ca23410ff4",
      "retryOnFail": true,
      "waitBetweenTries": 2000,
      "credentials": {
        "todoistApi": {
          "id": "7jDBSQS5HIVX5LSR",
          "name": "Todoist account (API Key)"
        }
      }
    },
    {
      "parameters": {
        "language": "python",
        "pythonCode": "def to_key(value):\n  if value is None:\n    return None\n  if isinstance(value, str):\n    value = value.strip()\n    return value or None\n  return str(value)\n\ndef to_identifier(value):\n  if value is None:\n    return None\n  if isinstance(value, bool):\n    value = int(value)\n  if isinstance(value, (int, float)):\n    if isinstance(value, float) and not value.is_integer():\n      return str(value)\n    return int(value)\n  if isinstance(value, str):\n    value = value.strip()\n    return value or None\n  return to_key(value)\n\ndef extract_task_ids(payload):\n  ids = []\n  if isinstance(payload, dict):\n    value = payload.get('id')\n    if value is not None:\n      ids.append(value)\n    for key in ('data', 'task', 'json'):\n      nested = payload.get(key)\n      if nested is not None:\n        ids.extend(extract_task_ids(nested))\n    for nested in payload.values():\n      if nested is payload:\n        continue\n      if isinstance(nested, (dict, list, tuple)):\n        ids.extend(extract_task_ids(nested))\n  elif isinstance(payload, (list, tuple)):\n    for entry in payload:\n      ids.extend(extract_task_ids(entry))\n  return ids\n\ndata = _getWorkflowStaticData('global')\ncontexts = data.get('contexts') or {}\ncurrent_key = to_key(data.get('currentPlaceholderKey'))\n\nout_items = []\n\nfor item in _input.all():\n  payload = getattr(item, 'json', None)\n  created_ids = extract_task_ids(payload)\n  if not created_ids:\n    raise ValueError('Failed to determine created task id')\n\n  placeholder_key = current_key\n  if placeholder_key is None and len(contexts) == 1:\n    placeholder_key = next(iter(contexts.keys()))\n  if placeholder_key is None:\n    raise ValueError('Missing placeholder key when updating parent map')\n\n  context = contexts.get(placeholder_key)\n  if context is None:\n    raise ValueError(f\"Missing template context for placeholder {placeholder_key}\")\n\n  pending = context.get('pendingTemplates')\n  if not isinstance(pending, list):\n    pending = []\n\n  parent_map = context.get('createdByTemplate')\n  if not isinstance(parent_map, dict):\n    parent_map = {}\n\n  for value in created_ids:\n    if not pending:\n      raise ValueError('Pending template queue is empty')\n    template_id = to_key(pending.pop(0))\n    if template_id is None:\n      raise ValueError('Failed to normalize template id for created task')\n    created_id = to_identifier(value)\n    if created_id is None:\n      raise ValueError('Failed to normalize created task id')\n    parent_map[template_id] = created_id\n    remaining = context.get('remainingCreates')\n    if isinstance(remaining, int):\n      context['remainingCreates'] = max(0, remaining - 1)\n\n  context['createdByTemplate'] = parent_map\n  context['pendingTemplates'] = pending\n\n  done = not pending and context.get('remainingCreates') in (None, 0)\n  if done:\n    contexts.pop(placeholder_key, None)\n    if to_key(data.get('currentPlaceholderKey')) == placeholder_key:\n      data['currentPlaceholderKey'] = None\n    current_key = None\n  else:\n    contexts[placeholder_key] = context\n    data['currentPlaceholderKey'] = placeholder_key\n    current_key = placeholder_key\n\n  out_items.append({'json': payload or {}})\n\nif contexts:\n  data['contexts'] = contexts\nelse:\n  data['contexts'] = {}\n  data['currentPlaceholderKey'] = None\n\nreturn out_items"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        2112,
        200
      ],
      "name": "Update Parent Map",
      "id": "7c46289a-ae38-477b-902f-f25202e96c66"
    }
  ],
  "pinData": {},
  "repo_name": "n8n-workflows",
  "repo_owner": "pschmitt",
  "repo_path": "workflows",
  "settings": {
    "executionOrder": "v1"
  },
  "shared": [
    {
      "createdAt": "2025-09-26T19:31:19.374Z",
      "updatedAt": "2025-09-26T19:31:19.374Z",
      "role": "workflow:owner",
      "workflowId": "19pwlUJok6EXe0uu",
      "projectId": "DeJsGrmui3Dbhpxg"
    }
  ],
  "staticData": {
    "node:Schedule Trigger": {
      "recurrenceRules": []
    }
  },
  "tags": [
    {
      "createdAt": "2025-03-01T06:50:52.672Z",
      "updatedAt": "2025-03-01T06:50:52.672Z",
      "id": "mjfF2OqntfnQP15x",
      "name": "todoist"
    }
  ],
  "triggerCount": 1,
  "updatedAt": "2025-10-09T09:37:33.000Z",
  "versionId": "8e233492-2b63-44df-b641-a746b1a5a447"
}
