{
  "active": false,
  "connections": {
    "Route Template Actions": {
      "main": [
        [
          {
            "node": "Delete Placeholder Task",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Create Template Task",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Build Template Actions": {
      "main": [
        [
          {
            "node": "Route Template Actions",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Fetch Active Tasks": {
      "main": [
        [
          {
            "node": "Build Template Actions",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Fetch Template Tasks": {
      "main": [
        [
          {
            "node": "Fetch Active Tasks",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Select Templates Project": {
      "main": [
        [
          {
            "node": "Fetch Template Tasks",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Fetch Projects": {
      "main": [
        [
          {
            "node": "Select Templates Project",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Schedule Trigger": {
      "main": [
        [
          {
            "node": "Fetch Projects",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "When clicking ‚ÄòTest workflow‚Äô": {
      "main": [
        [
          {
            "node": "Fetch Projects",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "createdAt": "2025-09-26T19:31:19.369Z",
  "id": "19pwlUJok6EXe0uu",
  "isArchived": false,
  "meta": null,
  "name": "‚òëÔ∏è Todoist Template Expander",
  "nodes": [
    {
      "parameters": {
        "project": "={{$json.create.project}}",
        "labels": "={{$json.create.labels}}",
        "content": "={{$json.create.content}}",
        "options": {}
      },
      "type": "n8n-nodes-base.todoist",
      "typeVersion": 2.1,
      "position": [
        1968,
        576
      ],
      "id": "3f979733-5f79-4111-80ed-ab089a902865",
      "name": "Create Template Task",
      "retryOnFail": true,
      "waitBetweenTries": 2000,
      "credentials": {
        "todoistApi": {
          "id": "7jDBSQS5HIVX5LSR",
          "name": "Todoist account (API Key)"
        }
      }
    },
    {
      "parameters": {
        "operation": "delete",
        "taskId": "={{$json.placeholder.id}}"
      },
      "type": "n8n-nodes-base.todoist",
      "typeVersion": 2.1,
      "position": [
        1840,
        160
      ],
      "id": "d55e8f69-8a6c-438d-bab8-2940c5cc7f6d",
      "name": "Delete Placeholder Task",
      "retryOnFail": true,
      "waitBetweenTries": 2000,
      "credentials": {
        "todoistApi": {
          "id": "7jDBSQS5HIVX5LSR",
          "name": "Todoist account (API Key)"
        }
      }
    },
    {
      "parameters": {
        "dataType": "string",
        "value1": "={{$json.action}}",
        "rules": {
          "rules": [
            {
              "value2": "deletePlaceholder"
            },
            {
              "value2": "createFromTemplate"
            }
          ]
        }
      },
      "type": "n8n-nodes-base.switch",
      "typeVersion": 2,
      "position": [
        1472,
        432
      ],
      "id": "ba5c1ca4-2630-459c-af3e-60a4984aae19",
      "name": "Route Template Actions"
    },
    {
      "parameters": {
        "language": "python",
        "pythonCode": "import re\nfrom collections import defaultdict, deque\n\nDEBUG = False\n\ntemplates = _('Select Templates Project').first()\ntemplate_project_id = None\nif templates:\n  template_project_id = templates.json.get('templatesProjectId')\n\nif template_project_id is None:\n  if DEBUG:\n    print('No template project found')\n  return []\n\nprojects = [item.json for item in _('Fetch Projects').all()]\ntest_project_id = None\nfor project in projects:\n  name = (project.get('name') or '').strip()\n  if name == 'üß™ Test (meta)':\n    test_project_id = project.get('id')\n    break\n\nif test_project_id is None:\n  if DEBUG:\n    print(\"Test project 'üß™ Test (meta)' not found\")\n  return []\n\ntemplate_tasks = [item.json for item in _('Fetch Template Tasks').all()]\nif not template_tasks:\n  if DEBUG:\n    print('Template project has no tasks')\n  return []\n\nall_tasks = [item.json for item in _input.all()]\n\nchildren = defaultdict(list)\nfor task in template_tasks:\n  parent_id = task.get('parent_id')\n  if parent_id:\n    children[parent_id].append(task)\n\nfor child_list in children.values():\n  child_list.sort(key=lambda item: item.get('child_order', 0))\n\ndef normalize_name(value):\n  if not value:\n    return ''\n  lowered = value.lower()\n  return ''.join(ch for ch in lowered if ch.isalnum())\n\ntemplate_index = [\n  (task, normalize_name(task.get('content', '')))\n  for task in template_tasks\n]\n\npattern = re.compile(r'^!!\\s*(.+)$', re.IGNORECASE)\nitems = []\n\nfor task in all_tasks:\n  if task.get('project_id') == template_project_id:\n    continue\n\n  if task.get('project_id') != test_project_id:\n    continue\n\n  match = pattern.match(task.get('content', ''))\n  if not match:\n    continue\n\n  template_name = match.group(1).strip()\n  normalized_placeholder = normalize_name(template_name)\n  if not normalized_placeholder:\n    continue\n\n  candidates = [\n    t for t, normalized in template_index\n    if normalized == normalized_placeholder\n  ]\n  candidates.sort(key=lambda t: (t.get('parent_id') is not None, t.get('child_order', 0)))\n  if not candidates:\n    if DEBUG:\n      print(f\"No template found for placeholder '{template_name}'\")\n    continue\n\n  root = candidates[0]\n\n  queue = deque([root])\n  subtree = []\n  while queue:\n    current = queue.popleft()\n    subtree.append(current)\n    for child in children.get(current.get('id'), []):\n      queue.append(child)\n\n  if not subtree:\n    continue\n\n  placeholder = {\n    'id': task.get('id'),\n    'projectId': task.get('project_id'),\n    'sectionId': task.get('section_id'),\n    'parentId': task.get('parent_id'),\n    'order': task.get('order'),\n    'childOrder': task.get('child_order'),\n  }\n\n  placeholder_key = str(task.get('id'))\n\n  items.append({\n    'json': {\n      'action': 'deletePlaceholder',\n      'placeholder': placeholder,\n      'templateName': template_name,\n      'placeholderKey': placeholder_key,\n    }\n  })\n\n  for template_task in subtree:\n    template_id = template_task.get('id')\n    payload = {\n      'templateId': template_id,\n      'parentTemplateId': template_task.get('parent_id'),\n      'content': template_task.get('content', ''),\n      'description': template_task.get('description'),\n      'priority': template_task.get('priority'),\n      'labels': template_task.get('labels') or [],\n      'order': template_task.get('order'),\n      'childOrder': template_task.get('child_order'),\n      'due': template_task.get('due') or {},\n      'isRoot': template_id == root.get('id'),\n    }\n\n    items.append({\n      'json': {\n        'action': 'createFromTemplate',\n        'placeholder': placeholder,\n        'templateName': template_name,\n        'placeholderKey': placeholder_key,\n        'task': payload,\n      }\n    })\n\nreturn items"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        976,
        240
      ],
      "id": "eb1601d4-c8f2-4f64-982f-34abf6324fa7",
      "name": "Build Template Actions"
    },
    {
      "parameters": {
        "operation": "getAll",
        "returnAll": true,
        "filters": {}
      },
      "type": "n8n-nodes-base.todoist",
      "typeVersion": 2.1,
      "position": [
        592,
        400
      ],
      "id": "0226596e-ed20-42ae-9b18-461dc0780b13",
      "name": "Fetch Active Tasks",
      "retryOnFail": true,
      "waitBetweenTries": 2000,
      "credentials": {
        "todoistApi": {
          "id": "7jDBSQS5HIVX5LSR",
          "name": "Todoist account (API Key)"
        }
      }
    },
    {
      "parameters": {
        "operation": "getAll",
        "returnAll": true,
        "filters": {
          "projectId": "={{$json.templatesProjectId}}"
        }
      },
      "type": "n8n-nodes-base.todoist",
      "typeVersion": 2.1,
      "position": [
        752,
        16
      ],
      "id": "54969096-baff-4853-a6f1-d7adb169d410",
      "name": "Fetch Template Tasks",
      "retryOnFail": true,
      "waitBetweenTries": 2000,
      "credentials": {
        "todoistApi": {
          "id": "7jDBSQS5HIVX5LSR",
          "name": "Todoist account (API Key)"
        }
      }
    },
    {
      "parameters": {
        "language": "python",
        "pythonCode": "import re\n\nprojects = [item.json for item in _input.all()]\n\ntemplate = None\nfor project in projects:\n  name = project.get(\"name\", \"\").strip()\n  if name.lower() == \"templates\":\n    template = project\n    break\n\nif not template:\n  return []\n\nreturn [{\n  \"json\": {\n    \"templatesProjectId\": template.get(\"id\"),\n    \"templatesProject\": template\n  }\n}]"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        464,
        176
      ],
      "id": "4ff81846-23d0-4ead-8fe7-c412d4dd8beb",
      "name": "Select Templates Project"
    },
    {
      "parameters": {
        "resource": "project",
        "operation": "getAll"
      },
      "type": "n8n-nodes-base.todoist",
      "typeVersion": 2.1,
      "position": [
        224,
        176
      ],
      "id": "919d2c25-a1db-4084-900a-824db36c44c9",
      "name": "Fetch Projects",
      "retryOnFail": true,
      "waitBetweenTries": 2000,
      "credentials": {
        "todoistApi": {
          "id": "7jDBSQS5HIVX5LSR",
          "name": "Todoist account (API Key)"
        }
      }
    },
    {
      "parameters": {
        "content": "## Todoist Template Expander\n\nThis workflow replaces shorthand tasks that start with `!!` by cloning the matching template (including subtasks) from the \"Templates\" project.",
        "height": 260,
        "width": 360
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        -320,
        -48
      ],
      "id": "ab3dda84-6362-4db7-8ef3-e1388dd073e7",
      "name": "Sticky Note"
    },
    {
      "parameters": {
        "rule": {
          "interval": [
            {
              "field": "minutes"
            }
          ]
        }
      },
      "type": "n8n-nodes-base.scheduleTrigger",
      "typeVersion": 1.2,
      "position": [
        -96,
        304
      ],
      "id": "170e8894-79b8-405a-9174-cd81668449e6",
      "name": "Schedule Trigger"
    },
    {
      "parameters": {},
      "type": "n8n-nodes-base.manualTrigger",
      "typeVersion": 1,
      "position": [
        -96,
        64
      ],
      "id": "5f6c5e04-af0d-4ed4-b65e-3b18eea3dab1",
      "name": "When clicking ‚ÄòTest workflow‚Äô"
    }
  ],
  "pinData": {},
  "repo_name": "n8n-workflows",
  "repo_owner": "pschmitt",
  "repo_path": "workflows",
  "settings": {
    "executionOrder": "v1"
  },
  "shared": [
    {
      "createdAt": "2025-09-26T19:31:19.374Z",
      "updatedAt": "2025-09-26T19:31:19.374Z",
      "role": "workflow:owner",
      "workflowId": "19pwlUJok6EXe0uu",
      "projectId": "DeJsGrmui3Dbhpxg"
    }
  ],
  "staticData": {
    "node:Schedule Trigger": {
      "recurrenceRules": []
    }
  },
  "tags": [
    {
      "createdAt": "2025-03-01T06:50:52.672Z",
      "updatedAt": "2025-03-01T06:50:52.672Z",
      "id": "mjfF2OqntfnQP15x",
      "name": "todoist"
    }
  ],
  "triggerCount": 1,
  "updatedAt": "2025-09-26T21:03:51.000Z",
  "versionId": "d00ae938-e54c-4123-9bd3-ba22bd883b33"
}