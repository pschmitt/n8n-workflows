{
  "active": false,
  "connections": {
    "When clicking ‚ÄòTest workflow‚Äô": {
      "main": [
        [
          {
            "node": "Fetch Projects",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Schedule Trigger": {
      "main": [
        [
          {
            "node": "Fetch Projects",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Fetch Projects": {
      "main": [
        [
          {
            "node": "Select Templates Project",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Select Templates Project": {
      "main": [
        [
          {
            "node": "Fetch Template Tasks",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Fetch Template Tasks": {
      "main": [
        [
          {
            "node": "Fetch Active Tasks",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Fetch Active Tasks": {
      "main": [
        [
          {
            "node": "Build Template Actions",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Build Template Actions": {
      "main": [
        [
          {
            "node": "Route Template Actions",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Route Template Actions": {
      "main": [
        [
          {
            "node": "Prepare Template Context",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Split In Batches (size 1)",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Prepare Template Context": {
      "main": [
        [
          {
            "node": "Delete Placeholder Task",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Split In Batches (size 1)": {
      "main": [
        [
          {
            "node": "Prepare Create Payload",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Prepare Create Payload": {
      "main": [
        [
          {
            "node": "Create Template Task",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Create Template Task": {
      "main": [
        [
          {
            "node": "Update Parent Map",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Update Parent Map": {
      "main": [
        [
          {
            "node": "Split In Batches (size 1)",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "createdAt": "2025-09-26T19:31:19.369Z",
  "id": "19pwlUJok6EXe0uu",
  "isArchived": false,
  "meta": {
    "templateCredsSetupCompleted": true
  },
  "name": "‚òëÔ∏è Todoist Template Expander (recursive, same-section)",
  "nodes": [
    {
      "parameters": {},
      "type": "n8n-nodes-base.manualTrigger",
      "typeVersion": 1,
      "position": [
        240,
        128
      ],
      "name": "When clicking ‚ÄòTest workflow‚Äô",
      "id": "dcb0792b-5e1e-4f1b-8501-16e485b483e2"
    },
    {
      "parameters": {
        "rule": {
          "interval": [
            {
              "field": "minutes"
            }
          ]
        }
      },
      "type": "n8n-nodes-base.scheduleTrigger",
      "typeVersion": 1.2,
      "position": [
        240,
        368
      ],
      "name": "Schedule Trigger",
      "id": "243f093e-ef1f-4e72-a195-44946629ebac"
    },
    {
      "parameters": {
        "content": "## Todoist Template Expander (recursive)\nFinds `!! TemplateName` tasks, deletes the placeholder, and clones the matching template (including all subtasks) into the **same project & section** as the placeholder. Creation is serialized with Split In Batches (size 1) so parent/child order is preserved.",
        "height": 300,
        "width": 480
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        0,
        0
      ],
      "name": "Sticky Note",
      "id": "5e546955-3383-48b1-91d0-945f7574f3c3"
    },
    {
      "parameters": {
        "resource": "project",
        "operation": "getAll"
      },
      "type": "n8n-nodes-base.todoist",
      "typeVersion": 2.1,
      "position": [
        560,
        240
      ],
      "name": "Fetch Projects",
      "id": "0c82da14-ed88-4831-a49b-b93d36fddca6",
      "retryOnFail": true,
      "waitBetweenTries": 2000,
      "credentials": {
        "todoistApi": {
          "id": "7jDBSQS5HIVX5LSR",
          "name": "Todoist account (API Key)"
        }
      }
    },
    {
      "parameters": {
        "language": "python",
        "pythonCode": "def normalize_name(value):\n  if not value:\n    return ''\n  return ''.join(ch for ch in value.lower() if ch.isalnum())\n\nprojects = [i.json for i in _input.all()]\nfor p in projects:\n  if normalize_name(p.get('name','')) == 'templates':\n    return [{ 'json': { 'templatesProjectId': p.get('id'), 'templatesProject': p } }]\nreturn []\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        800,
        240
      ],
      "name": "Select Templates Project",
      "id": "8b72e362-7fc0-4955-ad4d-5fda8fc1754c"
    },
    {
      "parameters": {
        "operation": "getAll",
        "returnAll": true,
        "filters": {
          "projectId": "={{$json.templatesProjectId}}"
        }
      },
      "type": "n8n-nodes-base.todoist",
      "typeVersion": 2.1,
      "position": [
        1088,
        80
      ],
      "name": "Fetch Template Tasks",
      "id": "3515b6e7-7adb-4824-8c92-236808d8d0f7",
      "retryOnFail": true,
      "waitBetweenTries": 2000,
      "credentials": {
        "todoistApi": {
          "id": "7jDBSQS5HIVX5LSR",
          "name": "Todoist account (API Key)"
        }
      }
    },
    {
      "parameters": {
        "operation": "getAll",
        "returnAll": true,
        "filters": {}
      },
      "type": "n8n-nodes-base.todoist",
      "typeVersion": 2.1,
      "position": [
        928,
        464
      ],
      "name": "Fetch Active Tasks",
      "id": "e2d73be0-aa15-4b50-a595-e3acf78cb188",
      "retryOnFail": true,
      "waitBetweenTries": 2000,
      "credentials": {
        "todoistApi": {
          "id": "7jDBSQS5HIVX5LSR",
          "name": "Todoist account (API Key)"
        }
      }
    },
    {
      "parameters": {
        "language": "python",
        "pythonCode": "import re\nfrom collections import defaultdict, deque\n\nDEBUG = False\nLIMIT_TO_TEST_PROJECT = True\nTEST_PROJECT_NAME = 'üß™ Test (meta)'\n\ndef normalize_name(value):\n  if not value:\n    return ''\n  return ''.join(ch for ch in value.lower() if ch.isalnum())\n\nsel = _('Select Templates Project').first()\nif not sel:\n  return []\nTEMPLATES_PROJ_ID = sel.json.get('templatesProjectId')\nif not TEMPLATES_PROJ_ID:\n  return []\n\nTEMPLATE_TASKS = [i.json for i in _('Fetch Template Tasks').all()]\nif not TEMPLATE_TASKS:\n  return []\n\nprojects = [i.json for i in _('Fetch Projects').all()]\nallowed = set()\nif LIMIT_TO_TEST_PROJECT:\n  for p in projects:\n    if (p.get('name') or '').strip() == TEST_PROJECT_NAME:\n      allowed.add(p.get('id'))\n      break\nelse:\n  for p in projects:\n    pid = p.get('id')\n    if pid and pid != TEMPLATES_PROJ_ID:\n      allowed.add(pid)\n\nchildren = defaultdict(list)\nfor t in TEMPLATE_TASKS:\n  pid = t.get('parent_id')\n  if pid:\n    children[pid].append(t)\nfor sibs in children.values():\n  sibs.sort(key=lambda x: x.get('child_order', 0))\n\nindex = [(t, normalize_name(t.get('content',''))) for t in TEMPLATE_TASKS]\npat = re.compile(r'^!!\\s*(.+)$', re.I)\nitems = []\n\nfor doc in _input.all():\n  task = doc.json\n  proj_id = task.get('project_id')\n  if proj_id == TEMPLATES_PROJ_ID:\n    continue\n  if allowed and proj_id not in allowed:\n    continue\n  m = pat.match(task.get('content','') or '')\n  if not m:\n    continue\n  template_name = m.group(1).strip()\n  key = normalize_name(template_name)\n  if not key:\n    continue\n  cands = [tt for tt,n in index if n == key]\n  cands.sort(key=lambda tt: (tt.get('parent_id') is not None, tt.get('child_order', 0)))\n  if not cands:\n    continue\n\n  root = cands[0]\n  q = deque([root])\n  subtree = []\n  while q:\n    cur = q.popleft()\n    subtree.append(cur)\n    for ch in children.get(cur.get('id'), []):\n      q.append(ch)\n  if not subtree:\n    continue\n\n  # Keep original placeholder fields, including section_id\n  placeholder = {\n    'id': task.get('id'),\n    'project_id': proj_id,\n    'section_id': task.get('section_id'),\n    'parent_id': task.get('parent_id'),\n    'order': task.get('order'),\n    'child_order': task.get('child_order')\n  }\n  ph_key = str(task.get('id'))\n\n  items.append({ 'json': {\n    'action': 'deletePlaceholder',\n    'placeholder': placeholder,\n    'placeholderKey': ph_key,\n    'totalCreateActions': len(subtree)\n  }})\n\n  for i, tmpl in enumerate(subtree):\n    payload = {\n      'templateId': tmpl.get('id'),\n      'parentTemplateId': tmpl.get('parent_id'),\n      'content': tmpl.get('content',''),\n      'description': tmpl.get('description') or '',\n      'priority': tmpl.get('priority'),\n      'labels': tmpl.get('labels') or [],\n      'order': tmpl.get('order'),\n      'childOrder': tmpl.get('child_order'),\n      'due': tmpl.get('due') or {},\n      'isRoot': tmpl.get('id') == root.get('id')\n    }\n    items.append({ 'json': {\n      'action': 'createFromTemplate',\n      'placeholder': placeholder,\n      'placeholderKey': ph_key,\n      'task': payload,\n      'isLastAction': i == len(subtree) - 1\n    }})\n\nreturn items\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1312,
        304
      ],
      "name": "Build Template Actions",
      "id": "92f78214-3cac-4057-8d28-8be610be0ba3"
    },
    {
      "parameters": {
        "dataType": "string",
        "value1": "={{$json.action}}",
        "rules": {
          "rules": [
            {
              "value2": "deletePlaceholder"
            },
            {
              "value2": "createFromTemplate"
            }
          ]
        }
      },
      "type": "n8n-nodes-base.switch",
      "typeVersion": 2,
      "position": [
        1616,
        496
      ],
      "name": "Route Template Actions",
      "id": "8ef5f583-b816-445a-a7f6-41904a2a1695"
    },
    {
      "parameters": {
        "language": "python",
        "pythonCode": "data = _getWorkflowStaticData('global')\nitems = list(_input.all())\nif not items:\n  data['contexts'] = {}\n  data['currentPlaceholderKey'] = None\n  return []\nitem = items[0].json\nph = item.get('placeholder')\nkey = str(item.get('placeholderKey') or (ph or {}).get('id'))\nctxs = data.get('contexts') or {}\nctxs[key] = {\n  'placeholder': ph,\n  'parentMap': {},\n  'remainingCreates': item.get('totalCreateActions', 0),\n  'pendingTemplateIds': []\n}\n# set current key globally so mapper always sees it\ndata['contexts'] = ctxs\ndata['currentPlaceholderKey'] = key\nreturn items\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1888,
        176
      ],
      "name": "Prepare Template Context",
      "id": "8c90666b-ceda-4466-b686-335358fe9aab"
    },
    {
      "parameters": {
        "operation": "delete",
        "taskId": "={{$json.placeholder.id}}"
      },
      "type": "n8n-nodes-base.todoist",
      "typeVersion": 2.1,
      "position": [
        2128,
        176
      ],
      "name": "Delete Placeholder Task",
      "id": "1003723f-0264-4efe-a652-3dbdc1cf7c16",
      "retryOnFail": true,
      "waitBetweenTries": 2000,
      "credentials": {
        "todoistApi": {
          "id": "7jDBSQS5HIVX5LSR",
          "name": "Todoist account (API Key)"
        }
      }
    },
    {
      "parameters": {
        "batchSize": 1,
        "options": {}
      },
      "type": "n8n-nodes-base.splitInBatches",
      "typeVersion": 2,
      "position": [
        1872,
        496
      ],
      "name": "Split In Batches (size 1)",
      "id": "52ed79a3-9a48-4028-b950-4651c14b9d6f"
    },
    {
      "parameters": {
        "language": "python",
        "pythonCode": "def get_json(item):\n  if hasattr(item, 'json'):\n    return item.json\n  if isinstance(item, dict):\n    return item.get('json', {})\n  return {}\n\ndata = _getWorkflowStaticData('global')\nitems = _input.all()\nif not items:\n  return []\nitem_json = get_json(items[0])\nph = item_json.get('placeholder') or {}\nplaceholder_key = str(item_json.get('placeholderKey') or ph.get('id'))\n# stamp the current key so the mapper can always find it\ndata['currentPlaceholderKey'] = placeholder_key\n\ncontexts = data.get('contexts') or {}\ncontext = contexts.get(placeholder_key)\nif not context:\n  context = { 'placeholder': ph, 'parentMap': {}, 'remainingCreates': item_json.get('totalCreateActions', 0), 'pendingTemplateIds': [] }\n  contexts[placeholder_key] = context\n  data['contexts'] = contexts\n\nparent_map = context.get('parentMap') or {}\n\ntask = item_json.get('task') or {}\nif not task:\n  raise ValueError('Missing template task payload')\n\noptions = {}\n# SAME SECTION: for the root task, copy the original placeholder's section\nif task.get('isRoot'):\n  if ph.get('section_id') is not None:\n    options['sectionId'] = ph.get('section_id')\n  if ph.get('parent_id') is not None:\n    options['parentId'] = ph.get('parent_id')\nelse:\n  parent_template_id = task.get('parentTemplateId')\n  if parent_template_id is not None:\n    parent_id = parent_map.get(parent_template_id)\n    if parent_id is None:\n      raise ValueError(f\"Parent for template {parent_template_id} not created yet - batching should prevent this\")\n    options['parentId'] = parent_id\n\n# other fields\nif task.get('description'):\n  options['description'] = task['description']\nprio = task.get('priority')\nif isinstance(prio, int) and prio > 0:\n  options['priority'] = prio\n\ndue = task.get('due') or {}\nif due.get('string'):\n  options['dueString'] = due['string']\nelif due.get('datetime'):\n  options['dueDateTime'] = due['datetime']\nelif due.get('date'):\n  options['dueDate'] = due['date']\n\nlabels = task.get('labels') or []\nif not isinstance(labels, list):\n  labels = [labels]\n\n# queue template id for mapper to pair with Todoist id\ntemplate_id = task.get('templateId')\ncontext.setdefault('pendingTemplateIds', []).append(template_id)\ncontexts[placeholder_key] = context\ndata['contexts'] = contexts\n\ncreate_payload = {\n  'content': task.get('content', ''),\n  'project': ph.get('project_id'),\n  'labels': labels,\n  'options': options,\n  'templateId': template_id,\n  'placeholderKey': placeholder_key,\n  'isLastAction': item_json.get('isLastAction', False)\n}\n\nreturn [{ 'json': { **item_json, 'create': create_payload } }]\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        2112,
        496
      ],
      "name": "Prepare Create Payload",
      "id": "4848d673-af08-4af1-b091-a3ade7827b5a"
    },
    {
      "parameters": {
        "project": "={{$json.create.project}}",
        "labels": "={{$json.create.labels}}",
        "content": "={{$json.create.content}}",
        "options": {}
      },
      "type": "n8n-nodes-base.todoist",
      "typeVersion": 2.1,
      "position": [
        2368,
        496
      ],
      "name": "Create Template Task",
      "id": "92f5b486-621f-4aee-b2a1-047d7a254a24",
      "retryOnFail": true,
      "waitBetweenTries": 2000,
      "credentials": {
        "todoistApi": {
          "id": "7jDBSQS5HIVX5LSR",
          "name": "Todoist account (API Key)"
        }
      }
    },
    {
      "parameters": {
        "language": "python",
        "pythonCode": "def is_string_like(x):\n  return isinstance(x, (str, bytes, bytearray))\n\ndef is_mapping_like(x):\n  if isinstance(x, dict):\n    return True\n  return hasattr(x, 'keys') or hasattr(x, 'items')\n\ndef is_sequence_like(x):\n  if isinstance(x, (list, tuple)):\n    return True\n  if is_string_like(x):\n    return False\n  return hasattr(x, '__len__') and hasattr(x, '__getitem__')\n\ndef mget(obj, key, default=None):\n  if isinstance(obj, dict):\n    return obj.get(key, default)\n  try:\n    return obj[key]\n  except Exception:\n    pass\n  try:\n    return getattr(obj, key)\n  except Exception:\n    return default\n\ndef iter_values(obj):\n  if isinstance(obj, dict):\n    for v in obj.values():\n      yield v\n    return\n  try:\n    for v in obj.values():\n      yield v\n    return\n  except Exception:\n    pass\n  try:\n    for _, v in obj.items():\n      yield v\n    return\n  except Exception:\n    pass\n  try:\n    for k in obj.keys():\n      yield mget(obj, k)\n  except Exception:\n    return\n\ndef iter_task_ids(payload):\n  if hasattr(payload, 'json'):\n    payload = payload.json\n  if is_mapping_like(payload):\n    tid = mget(payload, 'id')\n    if tid:\n      yield tid\n    for k in ('data','task','json'):\n      inner = mget(payload, k)\n      if inner is not None:\n        for x in iter_task_ids(inner):\n          yield x\n    for v in iter_values(payload):\n      for x in iter_task_ids(v):\n        yield x\n    return\n  if is_sequence_like(payload):\n    try:\n      n = len(payload)\n    except Exception:\n      n = 0\n    for i in range(n):\n      try:\n        v = payload[i]\n      except Exception:\n        continue\n      for x in iter_task_ids(v):\n        yield x\n    return\n  return\n\ndef to_str(v):\n  return None if v is None else str(v)\n\ndata = _getWorkflowStaticData('global')\ncontexts = data.get('contexts') or {}\ncurrent_key = to_str(data.get('currentPlaceholderKey'))\n\nout_items = []\n\nfor item in _input.all():\n  created_ids = list(iter_task_ids(item))\n  if not created_ids:\n    j = getattr(item, 'json', None)\n    created_ids = list(iter_task_ids(j))\n  if not created_ids:\n    raise ValueError('Failed to determine created task id')\n\n  # pick context key: current ‚Üí single remaining ‚Üí per-item\n  placeholder_key = current_key\n  if placeholder_key is None and isinstance(contexts, dict) and len(contexts) == 1:\n    placeholder_key = to_str(next(iter(contexts.keys())))\n  if placeholder_key is None:\n    j = getattr(item, 'json', None)\n    if is_mapping_like(j):\n      placeholder_key = to_str(mget(j, 'placeholderKey'))\n  if placeholder_key is None:\n    raise ValueError('Missing placeholder key when updating parent map')\n\n  ctx = contexts.get(placeholder_key)\n  if ctx is None:\n    ctx = { 'placeholder': {}, 'parentMap': {}, 'remainingCreates': 0, 'pendingTemplateIds': [] }\n\n  parent_map = ctx.get('parentMap') or {}\n  pending = list(ctx.get('pendingTemplateIds') or [])\n\n  for new_id in created_ids:\n    if pending:\n      templ_id = pending.pop(0)\n    else:\n      templ_id = None\n      j = getattr(item, 'json', None)\n      if is_mapping_like(j):\n        tp = mget(j, 'task', {})\n        if is_mapping_like(tp):\n          templ_id = mget(tp, 'templateId')\n    if templ_id is None:\n      raise ValueError('Missing template id for created task (pending queue empty)')\n    parent_map[templ_id] = new_id\n\n  ctx['parentMap'] = parent_map\n  ctx['pendingTemplateIds'] = pending\n\n  rem = ctx.get('remainingCreates')\n  if isinstance(rem, int) and rem > 0:\n    ctx['remainingCreates'] = max(0, rem - len(created_ids))\n\n  is_last = ctx.get('remainingCreates') in (None, 0)\n  j = getattr(item, 'json', None)\n  if is_mapping_like(j) and mget(j, 'isLastAction'):\n    is_last = True\n\n  if is_last:\n    contexts.pop(placeholder_key, None)\n    if to_str(data.get('currentPlaceholderKey')) == placeholder_key:\n      data['currentPlaceholderKey'] = None\n    current_key = None\n  else:\n    contexts[placeholder_key] = ctx\n\n  out_items.append({ 'json': getattr(item, 'json', {}) or {} })\n\n# persist\ndata['contexts'] = contexts if contexts else {}\nif not contexts:\n  data['currentPlaceholderKey'] = None\n\nreturn out_items\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        2608,
        496
      ],
      "name": "Update Parent Map",
      "id": "74be911a-b089-4aa2-b56c-c03583f929a0"
    }
  ],
  "pinData": {},
  "repo_name": "n8n-workflows",
  "repo_owner": "pschmitt",
  "repo_path": "workflows",
  "settings": {
    "executionOrder": "v1"
  },
  "shared": [
    {
      "createdAt": "2025-09-26T19:31:19.374Z",
      "updatedAt": "2025-09-26T19:31:19.374Z",
      "role": "workflow:owner",
      "workflowId": "19pwlUJok6EXe0uu",
      "projectId": "DeJsGrmui3Dbhpxg"
    }
  ],
  "staticData": {
    "node:Schedule Trigger": {
      "recurrenceRules": []
    }
  },
  "tags": [
    {
      "createdAt": "2025-03-01T06:50:52.672Z",
      "updatedAt": "2025-03-01T06:50:52.672Z",
      "id": "mjfF2OqntfnQP15x",
      "name": "todoist"
    }
  ],
  "triggerCount": 1,
  "updatedAt": "2025-09-29T10:19:16.000Z",
  "versionId": "ef665162-6e71-47d1-adb9-1957103180ea"
}