{
  "active": true,
  "connections": {
    "When clicking ‘Test workflow’": {
      "main": [
        [
          {
            "node": "Fetch Projects",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Schedule Trigger": {
      "main": [
        [
          {
            "node": "Fetch Projects",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Fetch Projects": {
      "main": [
        [
          {
            "node": "Select Templates Project",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Select Templates Project": {
      "main": [
        [
          {
            "node": "Fetch Template Tasks",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Fetch Template Tasks": {
      "main": [
        [
          {
            "node": "Fetch Active Tasks",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Fetch Active Tasks": {
      "main": [
        [
          {
            "node": "Build Template Actions",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Build Template Actions": {
      "main": [
        [
          {
            "node": "Process Template Actions",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Process Template Actions": {
      "main": [
        [
          {
            "node": "Route Template Actions",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Delete Placeholder Task": {
      "main": [
        [
          {
            "node": "Reset Template Context",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Reset Template Context": {
      "main": [
        [
          {
            "node": "Process Template Actions",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Prepare Create Payload": {
      "main": [
        [
          {
            "node": "Create Template Task",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Create Template Task": {
      "main": [
        [
          {
            "node": "Update Parent Map",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Update Parent Map": {
      "main": [
        [
          {
            "node": "Process Template Actions",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "createdAt": "2025-09-26T19:31:19.369Z",
  "id": "19pwlUJok6EXe0uu",
  "isArchived": false,
  "meta": null,
  "name": "☑️ Todoist Template Expander",
  "nodes": [
    {
      "parameters": {},
      "type": "n8n-nodes-base.manualTrigger",
      "typeVersion": 1,
      "position": [
        -1984,
        368
      ],
      "id": "762cb4d6-703c-4fc2-9b49-ac528ab7a25e",
      "name": "When clicking ‘Test workflow’"
    },
    {
      "parameters": {
        "rule": {
          "interval": [
            {
              "field": "minutes"
            }
          ]
        }
      },
      "type": "n8n-nodes-base.scheduleTrigger",
      "typeVersion": 1.2,
      "position": [
        -1984,
        608
      ],
      "id": "e9eb36f7-77fa-4f2a-9855-de316f3a9c02",
      "name": "Schedule Trigger"
    },
    {
      "parameters": {
        "content": "## Todoist Template Expander\n\nThis workflow replaces shorthand tasks that start with `!!` by cloning the matching template (including subtasks) from the \"Templates\" project.",
        "height": 260,
        "width": 360
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        -2208,
        256
      ],
      "id": "c47ea024-cbb1-4eae-8b9d-8701bc9ed836",
      "name": "Sticky Note"
    },
    {
      "parameters": {
        "resource": "project",
        "operation": "getAll"
      },
      "type": "n8n-nodes-base.todoist",
      "typeVersion": 2.1,
      "position": [
        -1664,
        480
      ],
      "id": "c2df8f30-5e74-4a6b-9f17-40034332b8a0",
      "name": "Fetch Projects",
      "retryOnFail": true,
      "waitBetweenTries": 2000,
      "credentials": {
        "todoistApi": {
          "id": "7jDBSQS5HIVX5LSR",
          "name": "Todoist account (API Key)"
        }
      }
    },
    {
      "parameters": {
        "language": "python",
        "pythonCode": "import re\n\nprojects = [item.json for item in _input.all()]\n\ntemplate = None\nfor project in projects:\n  name = project.get(\"name\", \"\").strip()\n  if name.lower() == \"templates\":\n    template = project\n    break\n\nif not template:\n  return []\n\nreturn [{\n  \"json\": {\n    \"templatesProjectId\": template.get(\"id\"),\n    \"templatesProject\": template\n  }\n}]"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -1424,
        480
      ],
      "id": "56ce309f-9ba4-4d2e-9cac-b61a6373f463",
      "name": "Select Templates Project"
    },
    {
      "parameters": {
        "operation": "getAll",
        "returnAll": true,
        "filters": {
          "projectId": "={{$json.templatesProjectId}}"
        }
      },
      "type": "n8n-nodes-base.todoist",
      "typeVersion": 2.1,
      "position": [
        -1152,
        320
      ],
      "id": "fb113427-cc18-4a77-8487-2a209d71b15f",
      "name": "Fetch Template Tasks",
      "retryOnFail": true,
      "waitBetweenTries": 2000,
      "credentials": {
        "todoistApi": {
          "id": "7jDBSQS5HIVX5LSR",
          "name": "Todoist account (API Key)"
        }
      }
    },
    {
      "parameters": {
        "operation": "getAll",
        "returnAll": true,
        "filters": {}
      },
      "type": "n8n-nodes-base.todoist",
      "typeVersion": 2.1,
      "position": [
        -1312,
        704
      ],
      "id": "030f2731-d2ef-4554-b037-ef3ed6cdda99",
      "name": "Fetch Active Tasks",
      "retryOnFail": true,
      "waitBetweenTries": 2000,
      "credentials": {
        "todoistApi": {
          "id": "7jDBSQS5HIVX5LSR",
          "name": "Todoist account (API Key)"
        }
      }
    },
    {
      "parameters": {
        "language": "python",
        "pythonCode": "import re\nfrom collections import defaultdict, deque\n\nDEBUG = False\n\ntemplates = _('Select Templates Project').first()\ntemplate_project_id = None\nif templates:\n  template_project_id = templates.json.get('templatesProjectId')\n\nif template_project_id is None:\n  if DEBUG:\n    print('No template project found')\n  return []\n\ntemplate_tasks = [item.json for item in _('Fetch Template Tasks').all()]\nif not template_tasks:\n  if DEBUG:\n    print('Template project has no tasks')\n  return []\n\nall_tasks = [item.json for item in _input.all()]\n\nchildren = defaultdict(list)\nfor task in template_tasks:\n  parent_id = task.get('parent_id')\n  if parent_id:\n    children[parent_id].append(task)\n\nfor child_list in children.values():\n  child_list.sort(key=lambda item: item.get('child_order', 0))\n\npattern = re.compile(r'^!!\\s*(.+)$', re.IGNORECASE)\nitems = []\n\nfor task in all_tasks:\n  if task.get('project_id') == template_project_id:\n    continue\n\n  match = pattern.match(task.get('content', ''))\n  if not match:\n    continue\n\n  template_name = match.group(1).strip()\n  if not template_name:\n    continue\n\n  candidates = [\n    t for t in template_tasks\n    if t.get('content', '').strip().lower() == template_name.lower()\n  ]\n  candidates.sort(key=lambda t: (t.get('parent_id') is not None, t.get('child_order', 0)))\n  if not candidates:\n    if DEBUG:\n      print(f\"No template found for placeholder '{template_name}'\")\n    continue\n\n  root = candidates[0]\n\n  queue = deque([root])\n  subtree = []\n  while queue:\n    current = queue.popleft()\n    subtree.append(current)\n    for child in children.get(current.get('id'), []):\n      queue.append(child)\n\n  if not subtree:\n    continue\n\n  placeholder = {\n    'id': task.get('id'),\n    'projectId': task.get('project_id'),\n    'sectionId': task.get('section_id'),\n    'parentId': task.get('parent_id'),\n    'order': task.get('order'),\n    'childOrder': task.get('child_order'),\n  }\n\n  placeholder_key = str(task.get('id'))\n\n  items.append({\n    'json': {\n      'action': 'delete',\n      'placeholder': placeholder,\n      'templateName': template_name,\n      'placeholderKey': placeholder_key,\n    }\n  })\n\n  for template_task in subtree:\n    template_id = template_task.get('id')\n    payload = {\n      'templateId': template_id,\n      'parentTemplateId': template_task.get('parent_id'),\n      'content': template_task.get('content', ''),\n      'description': template_task.get('description'),\n      'priority': template_task.get('priority'),\n      'labels': template_task.get('labels') or [],\n      'order': template_task.get('order'),\n      'childOrder': template_task.get('child_order'),\n      'due': template_task.get('due') or {},\n      'isRoot': template_id == root.get('id'),\n    }\n\n    items.append({\n      'json': {\n        'action': 'create',\n        'placeholder': placeholder,\n        'templateName': template_name,\n        'placeholderKey': placeholder_key,\n        'task': payload,\n      }\n    })\n\nreturn items"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -928,
        544
      ],
      "id": "49118fe3-0814-4722-bd1b-275e2e8397e0",
      "name": "Build Template Actions"
    },
    {
      "parameters": {
        "batchSize": 1,
        "options": {}
      },
      "type": "n8n-nodes-base.splitInBatches",
      "typeVersion": 1,
      "position": [
        -672,
        736
      ],
      "id": "157a65c2-f152-4334-b940-b182d914773b",
      "name": "Process Template Actions"
    },
    {
      "parameters": {
        "dataType": "string",
        "value1": "={{$json.action}}"
      },
      "type": "n8n-nodes-base.switch",
      "typeVersion": 2,
      "position": [
        -432,
        736
      ],
      "id": "fcbadd46-2bd6-4179-820a-03d80daa93a9",
      "name": "Route Template Actions"
    },
    {
      "parameters": {
        "operation": "delete",
        "taskId": "={{$json.placeholder.id}}"
      },
      "type": "n8n-nodes-base.todoist",
      "typeVersion": 2.1,
      "position": [
        -160,
        608
      ],
      "id": "d9a8aad9-1f61-4c99-b6d1-40bea3c89ff6",
      "name": "Delete Placeholder Task",
      "retryOnFail": true,
      "waitBetweenTries": 2000,
      "credentials": {
        "todoistApi": {
          "id": "7jDBSQS5HIVX5LSR",
          "name": "Todoist account (API Key)"
        }
      }
    },
    {
      "parameters": {
        "language": "python",
        "pythonCode": "data = this.getWorkflowStaticData('node')\ndata['parentMap'] = {}\nplaceholder = $json.get('placeholder')\nif placeholder:\n  data['currentPlaceholder'] = placeholder\n  data['currentPlaceholderKey'] = $json.get('placeholderKey')\nelse:\n  data.pop('currentPlaceholder', None)\n  data.pop('currentPlaceholderKey', None)\ndata.pop('currentTemplateId', None)\nreturn _input.all()"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        80,
        608
      ],
      "id": "854ab597-2288-4d00-b60b-99a423762c33",
      "name": "Reset Template Context"
    },
    {
      "parameters": {
        "language": "python",
        "pythonCode": "data = this.getWorkflowStaticData('node')\nplaceholder = data.get('currentPlaceholder') or $json.get('placeholder')\nif not placeholder:\n  raise ValueError('Missing placeholder context for task creation')\n\ndata['currentPlaceholder'] = placeholder\nparent_map = data.get('parentMap')\nif parent_map is None:\n  parent_map = {}\n  data['parentMap'] = parent_map\n\ntask = $json.get('task', {})\nif not task:\n  raise ValueError('Missing task payload')\n\noptions = {}\nsection_id = placeholder.get('sectionId')\n\ndescription = task.get('description')\nif description:\n  options['description'] = description\n\npriority = task.get('priority')\nif priority:\n  options['priority'] = priority\n\norder = placeholder.get('order') if task.get('isRoot') else None\nif order is not None:\n  options['order'] = order\n\nif task.get('isRoot'):\n  if section_id is not None:\n    options['section'] = section_id\n  parent_id = placeholder.get('parentId')\n  if parent_id is not None:\n    options['parentId'] = parent_id\nelse:\n  parent_template_id = task.get('parentTemplateId')\n  if parent_template_id is not None:\n    parent_id = parent_map.get(parent_template_id)\n    if parent_id is None:\n      raise ValueError(f\"Parent task for template {parent_template_id} has not been created yet\")\n    options['parentId'] = parent_id\n\ndue = task.get('due') or {}\nif due.get('string'):\n  options['dueString'] = due.get('string')\nif due.get('datetime'):\n  options['dueDateTime'] = due.get('datetime')\nelif due.get('date'):\n  options['dueDate'] = due.get('date')\nif due.get('lang'):\n  options['dueLang'] = due.get('lang')\n\nlabels = task.get('labels') or []\n\ncreate_payload = {\n  'content': task.get('content', ''),\n  'project': placeholder.get('projectId'),\n  'labels': labels,\n  'options': options,\n  'templateId': task.get('templateId'),\n}\n\ndata['currentTemplateId'] = task.get('templateId')\n\nreturn [{\n  'json': {\n    'placeholder': placeholder,\n    'placeholderKey': $json.get('placeholderKey'),\n    'task': task,\n    'create': create_payload,\n  }\n}]"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -160,
        880
      ],
      "id": "68be033d-6d0d-40e6-8c05-1f24dcd46366",
      "name": "Prepare Create Payload"
    },
    {
      "parameters": {
        "project": "={{$json.create.project}}",
        "labels": "={{$json.create.labels}}",
        "content": "={{$json.create.content}}",
        "options": {}
      },
      "type": "n8n-nodes-base.todoist",
      "typeVersion": 2.1,
      "position": [
        80,
        880
      ],
      "id": "eb0e8181-aaf1-4204-8cc1-1294007b040d",
      "name": "Create Template Task",
      "retryOnFail": true,
      "waitBetweenTries": 2000,
      "credentials": {
        "todoistApi": {
          "id": "7jDBSQS5HIVX5LSR",
          "name": "Todoist account (API Key)"
        }
      }
    },
    {
      "parameters": {
        "language": "python",
        "pythonCode": "data = this.getWorkflowStaticData('node')\nparent_map = data.get('parentMap') or {}\nresponse = $json.get('data') or $json\nnew_task_id = None\nif isinstance(response, dict):\n  new_task_id = response.get('id') or response.get('task', {}).get('id')\n\nif new_task_id is None:\n  raise ValueError('Failed to determine created task id')\n\ntemplate_id = data.get('currentTemplateId')\nif template_id is None:\n  raise ValueError('Missing template id context for created task')\n\nparent_map[template_id] = new_task_id\ndata['parentMap'] = parent_map\n\nreturn _input.all()"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        320,
        880
      ],
      "id": "1838d90b-48b1-4ee5-8c8b-cfb98f78e674",
      "name": "Update Parent Map"
    }
  ],
  "pinData": {},
  "repo_name": "n8n-workflows",
  "repo_owner": "pschmitt",
  "repo_path": "workflows",
  "settings": {
    "executionOrder": "v1"
  },
  "shared": [
    {
      "createdAt": "2025-09-26T19:31:19.374Z",
      "updatedAt": "2025-09-26T19:31:19.374Z",
      "role": "workflow:owner",
      "workflowId": "19pwlUJok6EXe0uu",
      "projectId": "DeJsGrmui3Dbhpxg"
    }
  ],
  "staticData": {
    "node:Schedule Trigger": {
      "recurrenceRules": []
    }
  },
  "tags": [],
  "triggerCount": 1,
  "updatedAt": "2025-09-26T19:41:55.000Z",
  "versionId": "6c5b3324-df1d-4ecb-93b0-3df6ca9723f9"
}