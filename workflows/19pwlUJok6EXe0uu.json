{
  "active": false,
  "connections": {
    "When clicking ‚ÄòTest workflow‚Äô": {
      "main": [
        [
          {
            "node": "Fetch Projects",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Schedule Trigger": {
      "main": [
        [
          {
            "node": "Fetch Projects",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Fetch Projects": {
      "main": [
        [
          {
            "node": "Select Templates Project",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Select Templates Project": {
      "main": [
        [
          {
            "node": "Fetch Template Tasks",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Fetch Template Tasks": {
      "main": [
        [
          {
            "node": "Fetch Active Tasks",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Fetch Active Tasks": {
      "main": [
        [
          {
            "node": "Build Template Actions",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Build Template Actions": {
      "main": [
        [
          {
            "node": "Route Template Actions",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Route Template Actions": {
      "main": [
        [
          {
            "node": "Prepare Template Context",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Prepare Create Payload",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Prepare Template Context": {
      "main": [
        [
          {
            "node": "Delete Placeholder Task",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Prepare Create Payload": {
      "main": [
        [
          {
            "node": "Create Template Task",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Create Template Task": {
      "main": [
        [
          {
            "node": "Update Parent Map",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "createdAt": "2025-09-26T19:31:19.369Z",
  "id": "19pwlUJok6EXe0uu",
  "isArchived": false,
  "meta": null,
  "name": "‚òëÔ∏è Todoist Template Expander",
  "nodes": [
    {
      "parameters": {},
      "type": "n8n-nodes-base.manualTrigger",
      "typeVersion": 1,
      "position": [
        -1504,
        -176
      ],
      "id": "6fcb6482-ca88-4025-930d-a4cbdc7c1cad",
      "name": "When clicking ‚ÄòTest workflow‚Äô"
    },
    {
      "parameters": {
        "rule": {
          "interval": [
            {
              "field": "minutes"
            }
          ]
        }
      },
      "type": "n8n-nodes-base.scheduleTrigger",
      "typeVersion": 1.2,
      "position": [
        -1504,
        80
      ],
      "id": "2608cf27-76d8-4b88-bf4b-5694e5993b30",
      "name": "Schedule Trigger"
    },
    {
      "parameters": {
        "content": "## Todoist Template Expander\n\nThis workflow replaces shorthand tasks that start with `!!` by cloning the matching template (including subtasks) from the \"Templates\" project.",
        "height": 260,
        "width": 360
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        -1728,
        -288
      ],
      "id": "27ade4fd-53b1-4516-b9b9-840a03348257",
      "name": "Sticky Note"
    },
    {
      "parameters": {
        "resource": "project",
        "operation": "getAll"
      },
      "type": "n8n-nodes-base.todoist",
      "typeVersion": 2.1,
      "position": [
        -1184,
        -64
      ],
      "id": "2ea9fd54-c860-405f-a924-1a8dabadc27f",
      "name": "Fetch Projects",
      "retryOnFail": true,
      "waitBetweenTries": 2000,
      "credentials": {
        "todoistApi": {
          "id": "7jDBSQS5HIVX5LSR",
          "name": "Todoist account (API Key)"
        }
      }
    },
    {
      "parameters": {
        "language": "python",
        "pythonCode": "\n\ndef normalize_name(value):\n    if not value:\n        return \"\"\n    lowered = value.lower()\n    return \"\".join(ch for ch in lowered if ch.isalnum())\n\nprojects = [item.json for item in _input.all()]\n\ntemplates_project = None\nfor project in projects:\n    name = project.get(\"name\", \"\")\n    normalized = normalize_name(name)\n    if normalized == \"templates\":\n        templates_project = project\n        break\n\nif not templates_project:\n    return []\n\nreturn [\n    {\n        \"json\": {\n            \"templatesProjectId\": templates_project.get(\"id\"),\n            \"templatesProject\": templates_project,\n        }\n    }\n]\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -944,
        -64
      ],
      "id": "3b34f2e4-e7f9-4671-9271-e020eb1dff44",
      "name": "Select Templates Project"
    },
    {
      "parameters": {
        "operation": "getAll",
        "returnAll": true,
        "filters": {
          "projectId": "={{$json.templatesProjectId}}"
        }
      },
      "type": "n8n-nodes-base.todoist",
      "typeVersion": 2.1,
      "position": [
        -656,
        -224
      ],
      "id": "5ad975c7-4bb3-40e9-9be3-832352e5ec97",
      "name": "Fetch Template Tasks",
      "retryOnFail": true,
      "waitBetweenTries": 2000,
      "credentials": {
        "todoistApi": {
          "id": "7jDBSQS5HIVX5LSR",
          "name": "Todoist account (API Key)"
        }
      }
    },
    {
      "parameters": {
        "operation": "getAll",
        "returnAll": true,
        "filters": {}
      },
      "type": "n8n-nodes-base.todoist",
      "typeVersion": 2.1,
      "position": [
        -816,
        176
      ],
      "id": "c3eb411d-cf91-47e4-b4f3-fd566295612f",
      "name": "Fetch Active Tasks",
      "retryOnFail": true,
      "waitBetweenTries": 2000,
      "credentials": {
        "todoistApi": {
          "id": "7jDBSQS5HIVX5LSR",
          "name": "Todoist account (API Key)"
        }
      }
    },
    {
      "parameters": {
        "language": "python",
        "pythonCode": "import re\nfrom collections import defaultdict, deque\n\nDEBUG = False\nLIMIT_TO_TEST_PROJECT = True\nTEST_PROJECT_NAME = \"üß™ Test (meta)\"\n\n\ndef normalize_name(value):\n    if not value:\n        return \"\"\n    lowered = value.lower()\n    return \"\".join(ch for ch in lowered if ch.isalnum())\n\n\ntemplate_project_item = _('Select Templates Project').first()\nif not template_project_item:\n    if DEBUG:\n        print('Templates project not found')\n    return []\n\ntemplate_project_id = template_project_item.json.get('templatesProjectId')\nif template_project_id is None:\n    if DEBUG:\n        print('Templates project id missing')\n    return []\n\ntemplate_tasks = [item.json for item in _('Fetch Template Tasks').all()]\nif not template_tasks:\n    if DEBUG:\n        print('Templates project has no tasks')\n    return []\n\nprojects = [item.json for item in _('Fetch Projects').all()]\nallowed_project_ids = set()\nif LIMIT_TO_TEST_PROJECT:\n    for project in projects:\n        name = (project.get('name') or '').strip()\n        if name == TEST_PROJECT_NAME:\n            allowed_project_ids.add(project.get('id'))\n            break\n    if not allowed_project_ids:\n        if DEBUG:\n            print(f\"Project {TEST_PROJECT_NAME!r} not found\")\n        return []\nelse:\n    for project in projects:\n        project_id = project.get('id')\n        if project_id and project_id != template_project_id:\n            allowed_project_ids.add(project_id)\n\nchildren = defaultdict(list)\nfor task in template_tasks:\n    parent_id = task.get('parent_id')\n    if parent_id:\n        children[parent_id].append(task)\n\nfor siblings in children.values():\n    siblings.sort(key=lambda item: item.get('child_order', 0))\n\ntemplate_index = [\n    (task, normalize_name(task.get('content', '')))\n    for task in template_tasks\n]\n\nplaceholder_pattern = re.compile(r'^!!\\s*(.+)$', re.IGNORECASE)\nitems = []\nall_tasks = [item.json for item in _input.all()]\n\nfor task in all_tasks:\n    project_id = task.get('project_id')\n    if project_id == template_project_id:\n        continue\n    if allowed_project_ids and project_id not in allowed_project_ids:\n        continue\n\n    match = placeholder_pattern.match(task.get('content', ''))\n    if not match:\n        continue\n\n    template_name = match.group(1).strip()\n    normalized_placeholder = normalize_name(template_name)\n    if not normalized_placeholder:\n        continue\n\n    candidates = [\n        template_task\n        for template_task, normalized in template_index\n        if normalized == normalized_placeholder\n    ]\n    candidates.sort(\n        key=lambda template_task: (\n            template_task.get('parent_id') is not None,\n            template_task.get('child_order', 0),\n        )\n    )\n    if not candidates:\n        if DEBUG:\n            print(f\"No template found for placeholder {template_name!r}\")\n        continue\n\n    root = candidates[0]\n    queue = deque([root])\n    subtree = []\n    while queue:\n        current = queue.popleft()\n        subtree.append(current)\n        for child in children.get(current.get('id'), []):\n            queue.append(child)\n\n    if not subtree:\n        continue\n\n    placeholder = {\n        'id': task.get('id'),\n        'projectId': project_id,\n        'sectionId': task.get('section_id'),\n        'parentId': task.get('parent_id'),\n        'order': task.get('order'),\n        'childOrder': task.get('child_order'),\n    }\n    placeholder_key = str(task.get('id'))\n\n    total_actions = len(subtree)\n    items.append(\n        {\n            'json': {\n                'action': 'deletePlaceholder',\n                'placeholder': placeholder,\n                'templateName': template_name,\n                'placeholderKey': placeholder_key,\n                'totalCreateActions': total_actions,\n            }\n        }\n    )\n\n    for index, template_task in enumerate(subtree):\n        template_id = template_task.get('id')\n        payload = {\n            'templateId': template_id,\n            'parentTemplateId': template_task.get('parent_id'),\n            'content': template_task.get('content', ''),\n            'description': template_task.get('description') or '',\n            'priority': template_task.get('priority'),\n            'labels': template_task.get('labels') or [],\n            'order': template_task.get('order'),\n            'childOrder': template_task.get('child_order'),\n            'due': template_task.get('due') or {},\n            'isRoot': template_id == root.get('id'),\n        }\n\n        items.append(\n            {\n                'json': {\n                    'action': 'createFromTemplate',\n                    'placeholder': placeholder,\n                    'templateName': template_name,\n                    'placeholderKey': placeholder_key,\n                    'task': payload,\n                    'isLastAction': index == total_actions - 1,\n                }\n            }\n        )\n\nreturn items"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -432,
        16
      ],
      "id": "631621bc-e7c5-43fb-9cb9-cbb2955d404e",
      "name": "Build Template Actions"
    },
    {
      "parameters": {
        "dataType": "string",
        "value1": "={{$json.action}}",
        "rules": {
          "rules": [
            {
              "value2": "deletePlaceholder"
            },
            {
              "value2": "createFromTemplate"
            }
          ]
        }
      },
      "type": "n8n-nodes-base.switch",
      "typeVersion": 2,
      "position": [
        -128,
        208
      ],
      "id": "0bb550e3-3da1-404a-aa29-00d54c33adee",
      "name": "Route Template Actions"
    },
    {
      "parameters": {
        "language": "python",
        "pythonCode": "def get_item_json(item):\n    if hasattr(item, 'json'):\n        return item.json\n    if isinstance(item, dict):\n        return item.get('json', {})\n    return {}\n\n\ndef to_output_item(item):\n    item_json = get_item_json(item)\n    result = {'json': item_json}\n    binary = getattr(item, 'binary', None)\n    if binary is None and isinstance(item, dict):\n        binary = item.get('binary')\n    if binary is not None:\n        result['binary'] = binary\n    paired = getattr(item, 'pairedItem', None)\n    if paired is None and isinstance(item, dict):\n        paired = item.get('pairedItem')\n    if paired is not None:\n        result['pairedItem'] = paired\n    return result\n\n\ndef get_static_data():\n    getter = globals().get('getWorkflowStaticData')\n    if callable(getter):\n        return getter('node')\n    for context_name in ('_self', 'self', 'this'):\n        context = globals().get(context_name)\n        if context is None:\n            continue\n        func = getattr(context, 'getWorkflowStaticData', None)\n        if callable(func):\n            return func('node')\n    raise RuntimeError('Workflow static data helper is unavailable')\n\n\ndata = get_static_data()\nitems = list(_input.all())\nif not items:\n    data['contexts'] = {}\n    data['currentPlaceholderKey'] = None\n    return []\n\nitem_json = get_item_json(items[0])\nplaceholder = item_json.get('placeholder')\nif not placeholder:\n    raise ValueError('Missing placeholder data in delete action')\n\nplaceholder_key = item_json.get('placeholderKey') or str(placeholder.get('id'))\ncontexts = data.get('contexts')\nif not isinstance(contexts, dict):\n    contexts = {}\ndata['contexts'] = contexts\n\ncontexts[placeholder_key] = {\n    'placeholder': placeholder,\n    'parentMap': {},\n    'remainingCreates': item_json.get('totalCreateActions', 0),\n}\n\ndata['currentPlaceholderKey'] = placeholder_key\n\nreturn [to_output_item(item) for item in items]"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        144,
        -128
      ],
      "id": "2d448d35-5081-43a5-8d6c-0d2dcb2c14a4",
      "name": "Prepare Template Context"
    },
    {
      "parameters": {
        "operation": "delete",
        "taskId": "={{$json.placeholder.id}}"
      },
      "type": "n8n-nodes-base.todoist",
      "typeVersion": 2.1,
      "position": [
        384,
        -128
      ],
      "id": "a716b1f3-d9d4-496e-9321-7d973a577b80",
      "name": "Delete Placeholder Task",
      "retryOnFail": true,
      "waitBetweenTries": 2000,
      "credentials": {
        "todoistApi": {
          "id": "7jDBSQS5HIVX5LSR",
          "name": "Todoist account (API Key)"
        }
      }
    },
    {
      "parameters": {
        "language": "python",
        "pythonCode": "def get_item_json(item):\n    if hasattr(item, 'json'):\n        return item.json\n    if isinstance(item, dict):\n        return item.get('json', {})\n    return {}\n\n\ndef to_output_item(json_payload):\n    return {'json': json_payload}\n\n\ndef get_static_data():\n    getter = globals().get('getWorkflowStaticData')\n    if callable(getter):\n        return getter('node')\n    for context_name in ('_self', 'self', 'this'):\n        context = globals().get(context_name)\n        if context is None:\n            continue\n        func = getattr(context, 'getWorkflowStaticData', None)\n        if callable(func):\n            return func('node')\n    raise RuntimeError('Workflow static data helper is unavailable')\n\n\ndata = get_static_data()\nitems = _input.all()\nif not items:\n    raise ValueError('Missing input item for task creation')\n\nitem_json = get_item_json(items[0])\nplaceholder_key = item_json.get('placeholderKey')\nif not placeholder_key:\n    raise ValueError('Missing placeholder key for task creation')\n\ncontexts = data.get('contexts') or {}\ncontext = contexts.get(placeholder_key)\nif not context:\n    raise ValueError(f\"No placeholder context for key {placeholder_key}\")\n\nplaceholder = context.get('placeholder')\nif not placeholder:\n    raise ValueError('Placeholder context is missing details')\n\nparent_map = context.get('parentMap') or {}\ntask = item_json.get('task') or {}\nif not task:\n    raise ValueError('Missing template task payload')\n\noptions = {}\nsection_id = placeholder.get('sectionId')\n\ndescription = task.get('description')\nif description:\n    options['description'] = description\n\npriority = task.get('priority')\nif isinstance(priority, int) and priority > 0:\n    options['priority'] = priority\n\nif task.get('isRoot'):\n    if section_id is not None:\n        options['section'] = section_id\n    parent_id = placeholder.get('parentId')\n    if parent_id is not None:\n        options['parentId'] = parent_id\nelse:\n    parent_template_id = task.get('parentTemplateId')\n    if parent_template_id is not None:\n        parent_id = parent_map.get(parent_template_id)\n        if parent_id is None:\n            raise ValueError(\n                f\"Parent task for template {parent_template_id} has not been created yet\"\n            )\n        options['parentId'] = parent_id\n\ndue = task.get('due') or {}\nif due.get('string'):\n    options['dueString'] = due.get('string')\nif due.get('datetime'):\n    options['dueDateTime'] = due.get('datetime')\nelif due.get('date'):\n    options['dueDate'] = due.get('date')\nif due.get('lang'):\n    options['dueLang'] = due.get('lang')\n\nlabels = task.get('labels') or []\nif not isinstance(labels, list):\n    labels = [labels]\n\ncreate_payload = {\n    'content': task.get('content', ''),\n    'project': placeholder.get('projectId'),\n    'labels': labels,\n    'options': options,\n    'templateId': task.get('templateId'),\n    'placeholderKey': placeholder_key,\n    'isLastAction': item_json.get('isLastAction', False),\n}\n\ncontext['parentMap'] = parent_map\ncontexts[placeholder_key] = context\ndata['contexts'] = contexts\n\noutput_json = {\n    'placeholder': placeholder,\n    'placeholderKey': placeholder_key,\n    'task': task,\n    'create': create_payload,\n    'isLastAction': item_json.get('isLastAction', False),\n}\n\nreturn [to_output_item(output_json)]"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        128,
        368
      ],
      "id": "1fe258ca-9469-49f1-8eeb-8e664e97217e",
      "name": "Prepare Create Payload"
    },
    {
      "parameters": {
        "project": "={{$json.create.project}}",
        "labels": "={{$json.create.labels}}",
        "content": "={{$json.create.content}}",
        "options": {}
      },
      "type": "n8n-nodes-base.todoist",
      "typeVersion": 2.1,
      "position": [
        384,
        368
      ],
      "id": "ca7b85f8-1bf8-459a-b81d-46c1d5dd21ee",
      "name": "Create Template Task",
      "retryOnFail": true,
      "waitBetweenTries": 2000,
      "credentials": {
        "todoistApi": {
          "id": "7jDBSQS5HIVX5LSR",
          "name": "Todoist account (API Key)"
        }
      }
    },
    {
      "parameters": {
        "language": "python",
        "pythonCode": "def get_item_json(item):\n    if hasattr(item, 'json'):\n        return item.json\n    if isinstance(item, dict):\n        return item.get('json', {})\n    return {}\n\n\ndef to_output_item(item):\n    item_json = get_item_json(item)\n    result = {'json': item_json}\n    binary = getattr(item, 'binary', None)\n    if binary is None and isinstance(item, dict):\n        binary = item.get('binary')\n    if binary is not None:\n        result['binary'] = binary\n    paired = getattr(item, 'pairedItem', None)\n    if paired is None and isinstance(item, dict):\n        paired = item.get('pairedItem')\n    if paired is not None:\n        result['pairedItem'] = paired\n    return result\n\n\ndef get_static_data():\n    getter = globals().get('getWorkflowStaticData')\n    if callable(getter):\n        return getter('node')\n    for context_name in ('_self', 'self', 'this'):\n        context = globals().get(context_name)\n        if context is None:\n            continue\n        func = getattr(context, 'getWorkflowStaticData', None)\n        if callable(func):\n            return func('node')\n    raise RuntimeError('Workflow static data helper is unavailable')\n\n\ndata = get_static_data()\nitems = list(_input.all())\nif not items:\n    return []\n\nitem_json = get_item_json(items[0])\nresponse = item_json.get('data') or item_json\nnew_task_id = None\nif isinstance(response, dict):\n    new_task_id = response.get('id') or response.get('task', {}).get('id')\n\nif new_task_id is None:\n    raise ValueError('Failed to determine created task id')\n\ncreate_payload = item_json.get('create') or {}\nplaceholder_key = create_payload.get('placeholderKey') or item_json.get('placeholderKey')\nif not placeholder_key:\n    raise ValueError('Missing placeholder key when updating parent map')\n\ncontexts = data.get('contexts')\nif not isinstance(contexts, dict):\n    contexts = {}\ncontext = contexts.get(placeholder_key)\nif context is None:\n    context = {\n        'placeholder': item_json.get('placeholder'),\n        'parentMap': {},\n        'remainingCreates': 0,\n    }\n\nparent_map = context.get('parentMap')\nif not isinstance(parent_map, dict):\n    parent_map = {}\ntemplate_id = create_payload.get('templateId') or item_json.get('task', {}).get('templateId')\nif template_id is None:\n    raise ValueError('Missing template id for created task')\n\nparent_map[template_id] = new_task_id\ncontext['parentMap'] = parent_map\n\nremaining = context.get('remainingCreates')\nif isinstance(remaining, int) and remaining > 0:\n    context['remainingCreates'] = remaining - 1\n\ncontexts[placeholder_key] = context\n\nif item_json.get('isLastAction') or context.get('remainingCreates') in (None, 0):\n    contexts.pop(placeholder_key, None)\n    if data.get('currentPlaceholderKey') == placeholder_key:\n        data['currentPlaceholderKey'] = None\n\nif contexts:\n    data['contexts'] = contexts\nelse:\n    data['contexts'] = {}\n    data['currentPlaceholderKey'] = None\n\nreturn [to_output_item(item) for item in items]"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        624,
        368
      ],
      "id": "aeae5a38-b3b7-478a-a6d9-27dd9cb7a05a",
      "name": "Update Parent Map"
    }
  ],
  "pinData": {},
  "repo_name": "n8n-workflows",
  "repo_owner": "pschmitt",
  "repo_path": "workflows",
  "settings": {
    "executionOrder": "v1"
  },
  "shared": [
    {
      "createdAt": "2025-09-26T19:31:19.374Z",
      "updatedAt": "2025-09-26T19:31:19.374Z",
      "role": "workflow:owner",
      "workflowId": "19pwlUJok6EXe0uu",
      "projectId": "DeJsGrmui3Dbhpxg"
    }
  ],
  "staticData": {
    "node:Schedule Trigger": {
      "recurrenceRules": []
    }
  },
  "tags": [
    {
      "createdAt": "2025-03-01T06:50:52.672Z",
      "updatedAt": "2025-03-01T06:50:52.672Z",
      "id": "mjfF2OqntfnQP15x",
      "name": "todoist"
    }
  ],
  "triggerCount": 1,
  "updatedAt": "2025-09-28T09:53:18.000Z",
  "versionId": "56c0e329-baa5-4eba-bce8-68f95212075f"
}