{
  "active": false,
  "connections": {
    "When clicking ‘Execute workflow’": {
      "main": [
        [
          {
            "node": "Get Test Project Tasks",
            "type": "main",
            "index": 0
          },
          {
            "node": "Get template tasks",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get Test Project Tasks": {
      "main": [
        [
          {
            "node": "Merge Tasks",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get template tasks": {
      "main": [
        [
          {
            "node": "Merge Tasks",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "Merge Tasks": {
      "main": [
        [
          {
            "node": "Build Expansion Actions",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Build Expansion Actions": {
      "main": [
        [
          {
            "node": "Route Action",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Route Action": {
      "main": [
        [
          {
            "node": "Update Task",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Delete Task",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Create Task",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "createdAt": "2025-09-26T19:31:19.369Z",
  "id": "19pwlUJok6EXe0uu",
  "isArchived": false,
  "meta": {
    "templateCredsSetupCompleted": true
  },
  "name": "☑️ Todoist Template Expander",
  "nodes": [
    {
      "parameters": {},
      "type": "n8n-nodes-base.manualTrigger",
      "typeVersion": 1,
      "position": [
        160,
        -128
      ],
      "id": "56b0900f-c6bf-43be-a4e5-7aaca4425ab1",
      "name": "When clicking ‘Execute workflow’"
    },
    {
      "parameters": {
        "operation": "getAll",
        "returnAll": true,
        "filters": {
          "labelId": "templated",
          "projectId": "2233792081"
        }
      },
      "type": "n8n-nodes-base.todoist",
      "typeVersion": 2.1,
      "position": [
        384,
        -224
      ],
      "id": "2eb68f40-c29c-4e1b-a17d-d435fd5c9752",
      "name": "Get Test Project Tasks",
      "credentials": {
        "todoistApi": {
          "id": "7jDBSQS5HIVX5LSR",
          "name": "Todoist account (API Key)"
        }
      }
    },
    {
      "parameters": {
        "operation": "getAll",
        "returnAll": true,
        "filters": {
          "projectId": "2360682540"
        }
      },
      "type": "n8n-nodes-base.todoist",
      "typeVersion": 2.1,
      "position": [
        384,
        -32
      ],
      "id": "571f4bf1-41da-4cc1-bc37-728f0a9f2469",
      "name": "Get template tasks",
      "credentials": {
        "todoistApi": {
          "id": "7jDBSQS5HIVX5LSR",
          "name": "Todoist account (API Key)"
        }
      }
    },
    {
      "parameters": {},
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3,
      "position": [
        608,
        -128
      ],
      "name": "Merge Tasks",
      "id": "67569839-a09f-4ec4-b780-d34f3154204b"
    },
    {
      "parameters": {
        "language": "python",
        "pythonCode": "from collections import defaultdict\n\ndef normalize_name(value):\n    if not value:\n        return ''\n    # Strips leading emojis and spaces\n    first_alnum_index = -1\n    for i, char in enumerate(value):\n        if char.isalnum():\n            first_alnum_index = i\n            break\n    if first_alnum_index == -1:\n        return ''\n    value = value[first_alnum_index:]\n    # Remove all non-alphanumeric characters\n    return ''.join(ch for ch in value.lower() if ch.isalnum())\n\n# All tasks from the test project, from input 0\ntest_project_tasks = [i.json for i in _input.all(0)]\n# All tasks from the templates project, from input 1\ntemplate_project_tasks = [i.json for i in _input.all(1)]\n\n# Build a map of parent_id -> list of child tasks for both projects\ntest_subtasks = defaultdict(list)\nfor task in test_project_tasks:\n    if task.get('parent_id'):\n        test_subtasks[task['parent_id']].append(task)\n\ntemplate_subtasks = defaultdict(list)\nfor task in template_project_tasks:\n    if task.get('parent_id'):\n        template_subtasks[task['parent_id']].append(task)\n\n# Create a lookup for top-level templates by their normalized name\ntemplate_lookup = {\n    normalize_name(t.get('content', '')): t\n    for t in template_project_tasks if not t.get('parent_id')\n}\n\nactions = []\n\n# Find tasks in the test project that need to be expanded\nfor task_to_expand in test_project_tasks:\n    if 'templated' in task_to_expand.get('labels', []):\n        normalized_content = normalize_name(task_to_expand.get('content', ''))\n        template = template_lookup.get(normalized_content)\n\n        if not template:\n            continue\n\n        # 1. Generate UPDATE action for the main task\n        original_labels = task_to_expand.get('labels', [])\n        template_labels = template.get('labels', [])\n        combined_labels = list(set(original_labels + template_labels))\n        final_labels = [label for label in combined_labels if label != 'templated']\n\n        update_payload = {\n            'task_id': task_to_expand['id'],\n            'project_id': task_to_expand['project_id'],\n            'content': template.get('content'),\n            'original_content': task_to_expand['content'],\n            'description': template.get('description'),\n            'priority': template.get('priority'),\n            'due': template.get('due', \"\"),\n            'labels': final_labels,\n            # 'TEMPLATE_SUBTASKS': template_subtasks\n        }\n        actions.append({'json': {'action': 'update_task', 'payload': update_payload}})\n\n        # 2. Generate DELETE actions for existing subtasks\n        existing_subtask_list = test_subtasks.get(task_to_expand['id'], [])\n        for subtask in existing_subtask_list:\n            delete_payload = {'task_id': subtask['id']}\n            actions.append({'json': {'action': 'delete_task', 'payload': delete_payload}})\n\n        # 3. Generate CREATE actions for new subtasks from the template\n        new_subtask_list = template_subtasks.get(template['id'], [])\n        for subtask_template in new_subtask_list:\n            create_payload = {\n                'content': subtask_template.get('content'),\n                'description': subtask_template.get('description'),\n                'priority': subtask_template.get('priority'),\n                'due': subtask_template.get('due', \"\"),\n                'labels': subtask_template.get('labels', []),\n                'parent_id': task_to_expand['id'],\n                'project_id': task_to_expand.get('project_id')\n            }\n            actions.append({'json': {'action': 'create_task', 'payload': create_payload}})\n\nreturn actions"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        832,
        -128
      ],
      "name": "Build Expansion Actions",
      "id": "e4ee7940-0034-46ba-9f3d-a732030dbcf1"
    },
    {
      "parameters": {
        "dataType": "string",
        "value1": "={{$json.action}}",
        "rules": {
          "rules": [
            {
              "value2": "update_task"
            },
            {
              "value2": "delete_task"
            },
            {
              "value2": "create_task"
            }
          ]
        }
      },
      "type": "n8n-nodes-base.switch",
      "typeVersion": 2,
      "position": [
        1056,
        -144
      ],
      "name": "Route Action",
      "id": "24d6aea3-d537-4ec1-86f5-9fa92081b144"
    },
    {
      "parameters": {
        "operation": "update",
        "taskId": "={{$json.payload.task_id}}",
        "updateFields": {
          "content": "={{$json.payload.content}}",
          "description": "={{$json.payload.description}}",
          "labels": "={{$json.payload.labels }}",
          "priority": "={{$json.payload.priority}}",
          "dueDate": "={{$json.payload.due ?? \"\"}}"
        }
      },
      "type": "n8n-nodes-base.todoist",
      "typeVersion": 2.1,
      "position": [
        1280,
        -320
      ],
      "name": "Update Task",
      "id": "0ddcaf97-1226-41ec-af5e-2f209a2716df",
      "credentials": {
        "todoistApi": {
          "id": "7jDBSQS5HIVX5LSR",
          "name": "Todoist account (API Key)"
        }
      }
    },
    {
      "parameters": {
        "operation": "delete",
        "taskId": "={{$json.payload.task_id}}"
      },
      "type": "n8n-nodes-base.todoist",
      "typeVersion": 2.1,
      "position": [
        1280,
        -128
      ],
      "name": "Delete Task",
      "id": "2887ba2a-fcdb-4c98-8c60-ec98ec7a247b",
      "credentials": {
        "todoistApi": {
          "id": "7jDBSQS5HIVX5LSR",
          "name": "Todoist account (API Key)"
        }
      }
    },
    {
      "parameters": {
        "project": {
          "__rl": true,
          "value": "={{$json.payload.project_id}}",
          "mode": "id"
        },
        "content": "={{$json.payload.content}}",
        "options": {
          "description": "={{$json.payload.description}}",
          "parentId": "={{$json.payload.parent_id}}",
          "priority": "={{$json.payload.priority}}"
        }
      },
      "type": "n8n-nodes-base.todoist",
      "typeVersion": 2.1,
      "position": [
        1280,
        64
      ],
      "name": "Create Task",
      "id": "231cbe30-2e27-4bd1-852a-2e0c8072f3fb",
      "credentials": {
        "todoistApi": {
          "id": "7jDBSQS5HIVX5LSR",
          "name": "Todoist account (API Key)"
        }
      }
    }
  ],
  "pinData": {},
  "repo_name": "n8n-workflows",
  "repo_owner": "pschmitt",
  "repo_path": "workflows",
  "settings": {
    "executionOrder": "v1"
  },
  "shared": [
    {
      "createdAt": "2025-09-26T19:31:19.374Z",
      "updatedAt": "2025-09-26T19:31:19.374Z",
      "role": "workflow:owner",
      "workflowId": "19pwlUJok6EXe0uu",
      "projectId": "DeJsGrmui3Dbhpxg"
    }
  ],
  "staticData": {
    "node:Schedule Trigger": {
      "recurrenceRules": []
    }
  },
  "tags": [
    {
      "createdAt": "2025-03-01T06:50:52.672Z",
      "updatedAt": "2025-03-01T06:50:52.672Z",
      "id": "mjfF2OqntfnQP15x",
      "name": "todoist"
    }
  ],
  "triggerCount": 1,
  "updatedAt": "2025-10-10T10:09:59.000Z",
  "versionId": "2edc304e-df44-4d6a-9c92-1ff14945cda7"
}