{
  "active": false,
  "connections": {
    "When clicking ‚ÄòTest workflow‚Äô": {
      "main": [
        [
          {
            "node": "Fetch Projects",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Schedule Trigger": {
      "main": [
        [
          {
            "node": "Fetch Projects",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Fetch Projects": {
      "main": [
        [
          {
            "node": "Select Templates Project",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Select Templates Project": {
      "main": [
        [
          {
            "node": "Fetch Template Tasks",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Fetch Template Tasks": {
      "main": [
        [
          {
            "node": "Fetch Active Tasks",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Fetch Active Tasks": {
      "main": [
        [
          {
            "node": "Build Template Actions",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Build Template Actions": {
      "main": [
        [
          {
            "node": "Route Template Actions",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Route Template Actions": {
      "main": [
        [
          {
            "node": "Prepare Template Context",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Split In Batches (size 1)",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Prepare Template Context": {
      "main": [
        [
          {
            "node": "Delete Placeholder Task",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Split In Batches (size 1)": {
      "main": [
        [
          {
            "node": "Prepare Create Payload",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Prepare Create Payload": {
      "main": [
        [
          {
            "node": "Create Template Task",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Create Template Task": {
      "main": [
        [
          {
            "node": "Update Parent Map",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Update Parent Map": {
      "main": [
        [
          {
            "node": "Split In Batches (size 1)",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "createdAt": "2025-09-26T19:31:19.369Z",
  "id": "19pwlUJok6EXe0uu",
  "isArchived": false,
  "meta": {
    "templateCredsSetupCompleted": true
  },
  "name": "‚òëÔ∏è Todoist Template Expander (recursive, same-section)",
  "nodes": [
    {
      "parameters": {},
      "type": "n8n-nodes-base.manualTrigger",
      "typeVersion": 1,
      "position": [
        -2048,
        -224
      ],
      "name": "When clicking ‚ÄòTest workflow‚Äô",
      "id": "52b23539-494d-435e-ae3a-d2549051a664"
    },
    {
      "parameters": {
        "rule": {
          "interval": [
            {
              "field": "minutes"
            }
          ]
        }
      },
      "type": "n8n-nodes-base.scheduleTrigger",
      "typeVersion": 1.2,
      "position": [
        -2048,
        16
      ],
      "name": "Schedule Trigger",
      "id": "440fe05d-fefc-43e5-a0d1-5e6a60a1578f"
    },
    {
      "parameters": {
        "content": "## Todoist Template Expander (recursive)\nFinds `!! TemplateName` tasks, deletes the placeholder, and clones the matching template (including all subtasks) into the **same project & section** as the placeholder. Creation is serialized with Split In Batches (size 1) so parent/child order is preserved.",
        "height": 300,
        "width": 480
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        -2288,
        -352
      ],
      "name": "Sticky Note",
      "id": "89f2567b-c758-49c9-8559-6ca3d12a9e23"
    },
    {
      "parameters": {
        "resource": "project",
        "operation": "getAll"
      },
      "type": "n8n-nodes-base.todoist",
      "typeVersion": 2.1,
      "position": [
        -1728,
        -112
      ],
      "name": "Fetch Projects",
      "id": "f47bf629-5525-4696-b8c6-7d89fb61251a",
      "retryOnFail": true,
      "waitBetweenTries": 2000,
      "credentials": {
        "todoistApi": {
          "id": "7jDBSQS5HIVX5LSR",
          "name": "Todoist account (API Key)"
        }
      }
    },
    {
      "parameters": {
        "language": "python",
        "pythonCode": "def normalize_name(value):\n  if not value:\n    return ''\n  return ''.join(ch for ch in value.lower() if ch.isalnum())\n\nprojects = [i.json for i in _input.all()]\nfor p in projects:\n  if normalize_name(p.get('name','')) == 'templates':\n    return [{ 'json': { 'templatesProjectId': p.get('id'), 'templatesProject': p } }]\nreturn []\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -1488,
        -112
      ],
      "name": "Select Templates Project",
      "id": "6fa51bfe-6599-4124-a0dd-f9dc41c738ab"
    },
    {
      "parameters": {
        "operation": "getAll",
        "returnAll": true,
        "filters": {
          "projectId": "={{$json.templatesProjectId}}"
        }
      },
      "type": "n8n-nodes-base.todoist",
      "typeVersion": 2.1,
      "position": [
        -1200,
        -272
      ],
      "name": "Fetch Template Tasks",
      "id": "dd16619d-e1dc-4437-8bd1-e75ded7e7f50",
      "retryOnFail": true,
      "waitBetweenTries": 2000,
      "credentials": {
        "todoistApi": {
          "id": "7jDBSQS5HIVX5LSR",
          "name": "Todoist account (API Key)"
        }
      }
    },
    {
      "parameters": {
        "operation": "getAll",
        "returnAll": true,
        "filters": {},
        "resource": "task"
      },
      "type": "n8n-nodes-base.todoist",
      "typeVersion": 2.1,
      "position": [
        -1360,
        112
      ],
      "name": "Fetch Active Tasks",
      "id": "bb76bf16-5301-4698-88e7-c009f65766bc",
      "retryOnFail": true,
      "waitBetweenTries": 2000,
      "credentials": {
        "todoistApi": {
          "id": "7jDBSQS5HIVX5LSR",
          "name": "Todoist account (API Key)"
        }
      }
    },
    {
      "parameters": {
        "language": "python",
        "pythonCode": "import re\nfrom collections import defaultdict\n\ndef normalize_name(value):\n  if not value:\n    return ''\n  return ''.join(ch for ch in value.lower() if ch.isalnum())\n\nsel = _('Select Templates Project').first()\nif not sel:\n  return []\nTEMPLATES_PROJ_ID = sel.json.get('templatesProjectId')\nif not TEMPLATES_PROJ_ID:\n  return []\n\nTEMPLATE_TASKS = [i.json for i in _('Fetch Template Tasks').all()]\nif not TEMPLATE_TASKS:\n  return []\n\nprojects = [i.json for i in _('Fetch Projects').all()]\nallowed = set()\nLIMIT_TO_TEST_PROJECT = True\nTEST_PROJECT_NAME = 'üß™ Test (meta)'\nif LIMIT_TO_TEST_PROJECT:\n  for p in projects:\n    if (p.get('name') or '').strip() == TEST_PROJECT_NAME:\n      allowed.add(p.get('id'))\n      break\nelse:\n  for p in projects:\n    pid = p.get('id')\n    if pid and pid != TEMPLATES_PROJ_ID:\n      allowed.add(pid)\n\nchildren = defaultdict(list)\nfor t in TEMPLATE_TASKS:\n  pid = t.get('parent_id')\n  if pid:\n    children[pid].append(t)\nfor sibs in children.values():\n  sibs.sort(key=lambda x: x.get('child_order', 0))\n\ndef collect_subtree(root):\n  ordered = []\n  stack = [root]\n  while stack:\n    node = stack.pop()\n    ordered.append(node)\n    kids = children.get(node.get('id'), [])\n    for child in reversed(kids):\n      stack.append(child)\n  return ordered\n\nindex = [(t, normalize_name(t.get('content',''))) for t in TEMPLATE_TASKS]\npat = re.compile(r'^!!\\s*(.+)$', re.I)\nitems = []\n\nfor doc in _input.all():\n  task = doc.json\n  proj_id = task.get('project_id')\n  if proj_id == TEMPLATES_PROJ_ID:\n    continue\n  if allowed and proj_id not in allowed:\n    continue\n  m = pat.match(task.get('content','') or '')\n  if not m:\n    continue\n  template_name = m.group(1).strip()\n  key = normalize_name(template_name)\n  if not key:\n    continue\n  cands = [tt for tt,n in index if n == key]\n  cands.sort(key=lambda tt: (tt.get('parent_id') is not None, tt.get('child_order', 0)))\n  if not cands:\n    continue\n\n  root = cands[0]\n  subtree = collect_subtree(root)\n  if not subtree:\n    continue\n\n  placeholder = {\n    'id': task.get('id'),\n    'project_id': proj_id,\n    'section_id': task.get('section_id'),\n    'parent_id': task.get('parent_id'),\n    'order': task.get('order'),\n    'child_order': task.get('child_order')\n  }\n  ph_key = str(task.get('id'))\n\n  items.append({ 'json': {\n    'action': 'deletePlaceholder',\n    'placeholder': placeholder,\n    'placeholderKey': ph_key,\n    'totalCreateActions': len(subtree)\n  }})\n\n  for i, tmpl in enumerate(subtree):\n    payload = {\n      'templateId': tmpl.get('id'),\n      'parentTemplateId': tmpl.get('parent_id'),\n      'content': tmpl.get('content',''),\n      'description': tmpl.get('description') or '',\n      'priority': tmpl.get('priority'),\n      'labels': tmpl.get('labels') or [],\n      'order': tmpl.get('order'),\n      'childOrder': tmpl.get('child_order'),\n      'due': tmpl.get('due') or {},\n      'isRoot': tmpl.get('id') == root.get('id')\n    }\n    items.append({ 'json': {\n      'action': 'createFromTemplate',\n      'placeholder': placeholder,\n      'placeholderKey': ph_key,\n      'task': payload,\n      'isLastAction': i == len(subtree) - 1\n    }})\n\nreturn items\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -976,
        -48
      ],
      "name": "Build Template Actions",
      "id": "e7e1bde8-30ec-4212-a4b2-93adcb858871"
    },
    {
      "parameters": {
        "dataType": "string",
        "value1": "={{$json.action}}",
        "rules": {
          "rules": [
            {
              "value2": "deletePlaceholder"
            },
            {
              "value2": "createFromTemplate"
            }
          ]
        }
      },
      "type": "n8n-nodes-base.switch",
      "typeVersion": 2,
      "position": [
        -672,
        144
      ],
      "name": "Route Template Actions",
      "id": "7c725a83-beb9-49eb-8daa-8cdacefb636e"
    },
    {
      "parameters": {
        "language": "python",
        "pythonCode": "data = _getWorkflowStaticData('global')\nitems = list(_input.all())\nif not items:\n  data['contexts'] = {}\n  data['currentPlaceholderKey'] = None\n  return []\nitem = items[0].json\nph = item.get('placeholder')\nkey = str(item.get('placeholderKey') or (ph or {}).get('id'))\nctxs = data.get('contexts') or {}\nctxs[key] = {\n  'placeholder': ph,\n  'parentMap': {},\n  'remainingCreates': item.get('totalCreateActions', 0),\n  'pendingTemplateIds': []\n}\n# set current key globally so mapper always sees it\ndata['contexts'] = ctxs\ndata['currentPlaceholderKey'] = key\nreturn items\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -400,
        -176
      ],
      "name": "Prepare Template Context",
      "id": "61d5dc64-f7eb-4799-ab93-237e3ddea86f"
    },
    {
      "parameters": {
        "operation": "delete",
        "taskId": "={{$json.placeholder.id}}"
      },
      "type": "n8n-nodes-base.todoist",
      "typeVersion": 2.1,
      "position": [
        -160,
        -176
      ],
      "name": "Delete Placeholder Task",
      "id": "5a369997-8b12-4b27-8e5b-9b484282df18",
      "retryOnFail": true,
      "waitBetweenTries": 2000,
      "credentials": {
        "todoistApi": {
          "id": "7jDBSQS5HIVX5LSR",
          "name": "Todoist account (API Key)"
        }
      }
    },
    {
      "parameters": {
        "batchSize": 1,
        "options": {}
      },
      "type": "n8n-nodes-base.splitInBatches",
      "typeVersion": 2,
      "position": [
        -416,
        144
      ],
      "name": "Split In Batches (size 1)",
      "id": "a2a36e5d-ecf8-4c9e-948b-1a7653d774b7"
    },
    {
      "parameters": {
        "language": "python",
        "pythonCode": "def get_json(item):\n  if hasattr(item, 'json'):\n    return item.json\n  if isinstance(item, dict):\n    return item.get('json', {})\n  return {}\n\ndef to_key(value):\n  if value is None:\n    return None\n  if isinstance(value, str):\n    value = value.strip()\n    return value or None\n  return str(value)\n\ndef normalize_parent_map(raw):\n  if isinstance(raw, dict):\n    cleaned = {}\n    for key, value in raw.items():\n      norm_key = to_key(key)\n      if norm_key is None or value is None:\n        continue\n      cleaned[norm_key] = value\n    return cleaned\n  return {}\n\ndef cleaned_option(value):\n  if value is None:\n    return None\n  if isinstance(value, (list, dict)) and not value:\n    return None\n  if isinstance(value, str):\n    stripped = value.strip()\n    if not stripped:\n      return None\n    return stripped\n  return value\n\ndef to_identifier(value):\n  if value is None:\n    return None\n  if isinstance(value, str):\n    value = value.strip()\n    if not value:\n      return None\n    return value\n  return value\n\ndata = _getWorkflowStaticData('global')\nitems = _input.all()\nif not items:\n  return []\nitem_json = get_json(items[0])\nph = item_json.get('placeholder') or {}\nraw_placeholder_key = item_json.get('placeholderKey')\nif raw_placeholder_key is None:\n  raw_placeholder_key = ph.get('id')\nif raw_placeholder_key is None:\n  raise ValueError('Missing placeholder key for task creation')\nplaceholder_key = str(raw_placeholder_key)\ndata['currentPlaceholderKey'] = placeholder_key\n\ncontexts = data.get('contexts') or {}\ncontext = contexts.get(placeholder_key)\nif not context:\n  context = {\n    'placeholder': ph,\n    'parentMap': {},\n    'remainingCreates': item_json.get('totalCreateActions', 0),\n    'pendingTemplateIds': [],\n  }\n  contexts[placeholder_key] = context\n  data['contexts'] = contexts\n\nparent_map = normalize_parent_map(context.get('parentMap'))\ncontext['parentMap'] = parent_map\n\ntask = item_json.get('task') or {}\nif not task:\n  raise ValueError('Missing template task payload')\n\noptions = {}\nif task.get('isRoot'):\n  section_id = to_identifier(ph.get('section_id'))\n  if section_id is not None:\n    options['sectionId'] = section_id\n  parent_from_placeholder = to_identifier(ph.get('parent_id'))\n  if parent_from_placeholder is not None:\n    options['parentId'] = parent_from_placeholder\nelse:\n  parent_template_id = task.get('parentTemplateId')\n  if parent_template_id is not None:\n    parent_template_key = str(parent_template_id)\n    parent_id = parent_map.get(parent_template_key)\n    if parent_id is None:\n      raise ValueError(f\"Parent for template {parent_template_key} not created yet - batching should prevent this\")\n    options['parentId'] = parent_id\n\ndescription = cleaned_option(task.get('description'))\nif description is not None:\n  options['description'] = description\nprio = task.get('priority')\nif isinstance(prio, int) and prio > 0:\n  options['priority'] = prio\n\ndue = task.get('due') or {}\ndue_string = cleaned_option(due.get('string'))\nif due_string is not None:\n  options['dueString'] = due_string\nelse:\n  due_datetime = cleaned_option(due.get('datetime'))\n  if due_datetime is not None:\n    options['dueDateTime'] = due_datetime\n  else:\n    due_date = cleaned_option(due.get('date'))\n    if due_date is not None:\n      options['dueDate'] = due_date\n\nlabels = task.get('labels') or []\nif not isinstance(labels, list):\n  labels = [labels]\nnormalized_labels = []\nfor label in labels:\n  ident = to_identifier(label)\n  if ident is not None:\n    normalized_labels.append(ident)\n\ntemplate_id = task.get('templateId')\nif template_id is None:\n  raise ValueError('Missing template id in template task payload')\ntemplate_id = str(template_id)\n\nexisting_pending = context.get('pendingTemplateIds') or []\nif isinstance(existing_pending, list):\n  pending = [str(x) for x in existing_pending if x is not None]\nelse:\n  pending = []\npending.append(template_id)\ncontext['pendingTemplateIds'] = pending\ncontexts[placeholder_key] = context\ndata['contexts'] = contexts\n\ncreate_options = {k: v for k, v in options.items() if cleaned_option(v) is not None}\n\ncreate_payload = {\n  'content': task.get('content', ''),\n  'project': to_identifier(ph.get('project_id')),\n  'labels': normalized_labels,\n  'options': create_options,\n  'templateId': template_id,\n  'placeholderKey': placeholder_key,\n  'isLastAction': item_json.get('isLastAction', False),\n}\n\nreturn [{'json': {**item_json, 'create': create_payload}}]"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -176,
        144
      ],
      "name": "Prepare Create Payload",
      "id": "46dfa53e-b918-4a31-814b-7d8cbb0d5609"
    },
    {
      "parameters": {
        "project": "={{$json.create.project}}",
        "labels": "={{$json.create.labels}}",
        "content": "={{$json.create.content}}",
        "options": {
          "description": "={{$json.create.options.description}}",
          "dueDate": "={{$json.create.options.dueDate}}",
          "dueDateTime": "={{$json.create.options.dueDateTime}}",
          "dueString": "={{$json.create.options.dueString}}",
          "parentId": "={{$json.create.options.parentId}}",
          "priority": "={{$json.create.options.priority}}",
          "sectionId": "={{$json.create.options.sectionId}}"
        },
        "operation": "create",
        "resource": "task"
      },
      "type": "n8n-nodes-base.todoist",
      "typeVersion": 2.1,
      "position": [
        80,
        144
      ],
      "name": "Create Template Task",
      "id": "b25138d6-e2b2-470d-a98f-2f05cfa48a83",
      "retryOnFail": true,
      "waitBetweenTries": 2000,
      "credentials": {
        "todoistApi": {
          "id": "7jDBSQS5HIVX5LSR",
          "name": "Todoist account (API Key)"
        }
      }
    },
    {
      "parameters": {
        "language": "python",
        "pythonCode": "def is_string_like(x):\n  return isinstance(x, (str, bytes, bytearray))\n\ndef is_mapping_like(x):\n  if isinstance(x, dict):\n    return True\n  return hasattr(x, 'keys') or hasattr(x, 'items')\n\ndef is_sequence_like(x):\n  if isinstance(x, (list, tuple)):\n    return True\n  if is_string_like(x):\n    return False\n  return hasattr(x, '__len__') and hasattr(x, '__getitem__')\n\ndef mget(obj, key, default=None):\n  if isinstance(obj, dict):\n    return obj.get(key, default)\n  try:\n    return obj[key]\n  except Exception:\n    pass\n  try:\n    return getattr(obj, key)\n  except Exception:\n    return default\n\ndef iter_values(obj):\n  if isinstance(obj, dict):\n    for v in obj.values():\n      yield v\n    return\n  try:\n    for v in obj.values():\n      yield v\n    return\n  except Exception:\n    pass\n  try:\n    for _, v in obj.items():\n      yield v\n    return\n  except Exception:\n    pass\n  try:\n    for k in obj.keys():\n      yield mget(obj, k)\n  except Exception:\n    return\n\ndef iter_task_ids(payload):\n  if hasattr(payload, 'json'):\n    payload = payload.json\n  if is_mapping_like(payload):\n    tid = mget(payload, 'id')\n    if tid is not None:\n      yield tid\n    for k in ('data', 'task', 'json'):\n      inner = mget(payload, k)\n      if inner is not None:\n        for x in iter_task_ids(inner):\n          yield x\n    for v in iter_values(payload):\n      for x in iter_task_ids(v):\n        yield x\n    return\n  if is_sequence_like(payload):\n    try:\n      n = len(payload)\n    except Exception:\n      n = 0\n    for i in range(n):\n      try:\n        v = payload[i]\n      except Exception:\n        continue\n      for x in iter_task_ids(v):\n        yield x\n    return\n  return\n\ndef to_key(value):\n  if value is None:\n    return None\n  if isinstance(value, str):\n    value = value.strip()\n    return value or None\n  return str(value)\n\ndata = _getWorkflowStaticData('global')\ncontexts = data.get('contexts') or {}\ncurrent_key = to_key(data.get('currentPlaceholderKey'))\n\nout_items = []\n\nfor item in _input.all():\n  created_ids = [x for x in iter_task_ids(item) if x is not None]\n  if not created_ids:\n    j = getattr(item, 'json', None)\n    created_ids = [x for x in iter_task_ids(j) if x is not None]\n  if not created_ids:\n    raise ValueError('Failed to determine created task id')\n\n  placeholder_key = current_key\n  if placeholder_key is None and isinstance(contexts, dict) and len(contexts) == 1:\n    placeholder_key = to_key(next(iter(contexts.keys()), None))\n  if placeholder_key is None:\n    j = getattr(item, 'json', None)\n    if is_mapping_like(j):\n      placeholder_key = to_key(mget(j, 'placeholderKey'))\n  if placeholder_key is None:\n    raise ValueError('Missing placeholder key when updating parent map')\n\n  ctx = contexts.get(placeholder_key)\n  if ctx is None:\n    ctx = {\n      'placeholder': {},\n      'parentMap': {},\n      'remainingCreates': 0,\n      'pendingTemplateIds': [],\n    }\n\n  parent_map = ctx.get('parentMap')\n  if not isinstance(parent_map, dict):\n    parent_map = {}\n  else:\n    parent_map = {\n      to_key(k): v\n      for k, v in parent_map.items()\n      if to_key(k) is not None and v is not None\n    }\n\n  pending = [to_key(x) for x in (ctx.get('pendingTemplateIds') or []) if to_key(x) is not None]\n\n  for new_id in created_ids:\n    templ_id = None\n    if pending:\n      templ_id = pending.pop(0)\n    if templ_id is None:\n      j = getattr(item, 'json', None)\n      if is_mapping_like(j):\n        tp = mget(j, 'task', {})\n        if is_mapping_like(tp):\n          templ_id = to_key(mget(tp, 'templateId'))\n    if templ_id is None:\n      raise ValueError('Missing template id for created task (pending queue empty)')\n    parent_map[to_key(templ_id)] = new_id\n\n  ctx['parentMap'] = parent_map\n  ctx['pendingTemplateIds'] = pending\n\n  rem = ctx.get('remainingCreates')\n  if isinstance(rem, int) and rem > 0:\n    ctx['remainingCreates'] = max(0, rem - len(created_ids))\n\n  is_last = ctx.get('remainingCreates') in (None, 0)\n  j = getattr(item, 'json', None)\n  if is_mapping_like(j) and mget(j, 'isLastAction'):\n    is_last = True\n\n  if is_last:\n    contexts.pop(placeholder_key, None)\n    if to_key(data.get('currentPlaceholderKey')) == placeholder_key:\n      data['currentPlaceholderKey'] = None\n    current_key = None\n  else:\n    contexts[placeholder_key] = ctx\n    current_key = placeholder_key\n\n  out_items.append({'json': getattr(item, 'json', {}) or {}})\n\ndata['contexts'] = contexts if contexts else {}\nif not contexts:\n  data['currentPlaceholderKey'] = None\n\nreturn out_items"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        320,
        144
      ],
      "name": "Update Parent Map",
      "id": "b31088cb-02d9-41e9-84cc-7af3aede81f3"
    }
  ],
  "pinData": {},
  "repo_name": "n8n-workflows",
  "repo_owner": "pschmitt",
  "repo_path": "workflows",
  "settings": {
    "executionOrder": "v1"
  },
  "shared": [
    {
      "createdAt": "2025-09-26T19:31:19.374Z",
      "updatedAt": "2025-09-26T19:31:19.374Z",
      "role": "workflow:owner",
      "workflowId": "19pwlUJok6EXe0uu",
      "projectId": "DeJsGrmui3Dbhpxg"
    }
  ],
  "staticData": {
    "node:Schedule Trigger": {
      "recurrenceRules": []
    }
  },
  "tags": [
    {
      "createdAt": "2025-03-01T06:50:52.672Z",
      "updatedAt": "2025-03-01T06:50:52.672Z",
      "id": "mjfF2OqntfnQP15x",
      "name": "todoist"
    }
  ],
  "triggerCount": 1,
  "updatedAt": "2025-09-29T07:41:53.000Z",
  "versionId": "b5b36449-ce98-4995-828f-703a158cac98"
}
